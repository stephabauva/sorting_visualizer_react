{"ast":null,"code":"export function doInsertionSort(array) {\n  const animations = [];\n  console.log(array);\n\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i]; // animations.push([1, i]); //color the key red\n\n    let j = i - 1;\n\n    while (j >= 0 && key < array[j]) {\n      array[j + 1] = array[j]; // animations.push([2, j+1, j]); //select j+1 and j (purple)\n\n      animations.push([3, j + 1, j]); //j+1 overwritten by j (orange)\n      // animations.push([0, j+1, j]); //back to blue\n\n      j -= 1;\n    }\n\n    array[j + 1] = key; // animations.push([2, j+1, i]); //select j+1 and j (purple)\n\n    animations.push([3, j + 1, key]); //j+1 overwritten by key (orange)\n    // animations.push([0, j+1, i]); //back to blue\n  }\n\n  console.log('sorted:', array);\n  return animations;\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/InsertionSort.js"],"names":["doInsertionSort","array","animations","console","log","i","length","key","j","push"],"mappings":"AAAA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACnC,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,OAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,KAAK,CAACK,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,QAAIE,GAAG,GAAGN,KAAK,CAACI,CAAD,CAAf,CAD+B,CAE/B;;AACA,QAAIG,CAAC,GAAGH,CAAC,GAAC,CAAV;;AACA,WAAOG,CAAC,IAAE,CAAH,IAAQD,GAAG,GAACN,KAAK,CAACO,CAAD,CAAxB,EAA6B;AACzBP,MAAAA,KAAK,CAACO,CAAC,GAAG,CAAL,CAAL,GAAeP,KAAK,CAACO,CAAD,CAApB,CADyB,CAEzB;;AACAN,MAAAA,UAAU,CAACO,IAAX,CAAgB,CAAC,CAAD,EAAID,CAAC,GAAC,CAAN,EAASA,CAAT,CAAhB,EAHyB,CAGK;AAC9B;;AACAA,MAAAA,CAAC,IAAE,CAAH;AACH;;AACDP,IAAAA,KAAK,CAACO,CAAC,GAAC,CAAH,CAAL,GAAWD,GAAX,CAX+B,CAY/B;;AACAL,IAAAA,UAAU,CAACO,IAAX,CAAgB,CAAC,CAAD,EAAID,CAAC,GAAC,CAAN,EAASD,GAAT,CAAhB,EAb+B,CAaC;AAChC;AACH;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACA,SAAOC,UAAP;AACH","sourcesContent":["export function doInsertionSort(array) {\n    const animations = [];\n    console.log(array);\n    for (let i=1; i<array.length; i++) {\n        let key = array[i];\n        // animations.push([1, i]); //color the key red\n        let j = i-1;\n        while (j>=0 && key<array[j]) {\n            array[j + 1] = array[j];\n            // animations.push([2, j+1, j]); //select j+1 and j (purple)\n            animations.push([3, j+1, j]); //j+1 overwritten by j (orange)\n            // animations.push([0, j+1, j]); //back to blue\n            j-=1;\n        }\n        array[j+1]=key;\n        // animations.push([2, j+1, i]); //select j+1 and j (purple)\n        animations.push([3, j+1, key]); //j+1 overwritten by key (orange)\n        // animations.push([0, j+1, i]); //back to blue\n    }\n    console.log('sorted:', array);\n    return animations\n}"]},"metadata":{},"sourceType":"module"}