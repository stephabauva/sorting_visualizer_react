{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms';\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  // the store is accessible because we added Provider in index.js\n  console.log('SortingViz mapStateToProps:', state.listState);\n  return {\n    myStoredList: state.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 1;\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n    console.log('this.array:', this.state.array);\n  }\n  /* compare previous list in store to the new actual list generated */\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n    // console.log('this.props:', this.props);\n    if (prevProps.myStoredList !== this.props.myStoredList) {\n      // Do whatever you want\n      // console.log('previous list:',prevProps.lmyStoredList);\n      // console.log('actual list:',this.props.myStoredList);\n      this.setState({\n        array: this.props.myStoredList\n      });\n    }\n  }\n  /* ************************************************************ */\n\n\n  mergeSort() {\n    const animations = doMergeSort(this.state.array);\n    console.log(animations);\n    {\n      /*for (let i=0; i<animations.length; i++) {\n         const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n         const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n         if (isColorChange) { //if True\n             //then grab the 2 indices of the subarray\n             const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n             // get the style at these two indices\n             const barOneStyle = arrayBars[barOneIdx].style;\n             const barTwoStyle = arrayBars[barTwoIdx].style;\n             // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n             const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n             // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n             // a condition followed by a question mark (?), then an expression to execute if the condition is \n             // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n             // This operator is frequently used as a shortcut for the if statement.\n             // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n              //using a timeout, slowly change the colors of barOne and barTwo\n             setTimeout( () => {\n                 barOneStyle.backgroundColor = color;\n                 barTwoStyle.backgroundColor = color;\n             }, i * ANIMATION_SPEED_MS);\n         } else {\n             //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n             // -> [idx to be overwritten, overwrittign value], \n             setTimeout( () => {\n                 // then get the idx, get the value\n                 const [barOneIdx, newHeight] = animations[i];\n                 // overwritte the old value\n                 arrayBars[barOneIdx].style.height = `${newHeight}px`;\n             }, i * ANIMATION_SPEED_MS);\n             \n         }\n      } */\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(4, 1, 6, 3, 2, 1),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","doMergeSort","mapStateToProps","state","console","log","listState","myStoredList","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","array","componentDidUpdate","prevProps","prevState","snapshot","setState","mergeSort","animations","render","map","value","idx","backgroundColor","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,wCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAE;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA0CF,KAAK,CAACG,SAAhD;AACA,SAAO;AAAEC,IAAAA,YAAY,EAAEJ,KAAK,CAACG;AAAtB,GAAP;AAED,CAJH,C,CAMA;;;AACA,MAAME,aAAa,GAAG,WAAtB;AACA,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,kBAAkB,GAAG,CAA3B;;AAEA,MAAMC,iBAAN,SAAgCZ,KAAK,CAACa,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKX,KAAL,GAAa;AAAEY,MAAAA,KAAK,EAAE;AAAT,KAAb;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKF,KAAL,CAAWY,KAAtC;AACD;AACH;;;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C;AACA;AACA,QAAIF,SAAS,CAACV,YAAV,KAA2B,KAAKO,KAAL,CAAWP,YAA1C,EAAwD;AACpD;AACA;AACA;AACA,WAAKa,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWP;AAApB,OAAd;AAEH;AACJ;AACD;;;AAEAc,EAAAA,SAAS,GAAG;AACR,UAAMC,UAAU,GAAGrB,WAAW,CAAC,KAAKE,KAAL,CAAWY,KAAZ,CAA9B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYiB,UAAZ;AACA;AAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;AAER;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,iBACF,KAAKpB,KAAL,CAAWY,KAAX,CAAiBS,GAAjB,CAAqB,CAACC,KAAD,EAAQC,GAAR,kBAClB;AACA,QAAA,SAAS,EAAC,WADV;AAGA,QAAA,KAAK,EAAE;AACHC,UAAAA,eAAe,EAAEnB,aADd;AAEHoB,UAAAA,MAAM,EAAG,GAAEH,KAAM;AAFd;AAHP,SAEKC,GAFL;AAAA;AAAA;AAAA;AAAA,cADH,CADE,eAUH;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKL,SAAL,CAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB,CAArB,EAAuB,CAAvB,EAAyB,CAAzB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAYH;;AAzE2C;;AA6EhD,eAAerB,OAAO,CAACE,eAAD,CAAP,CAAyBS,iBAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (state) => { // the store is accessible because we added Provider in index.js\n    console.log('SortingViz mapStateToProps:',state.listState);\n    return { myStoredList: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 1;\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n            \n        }\n    }\n    /* ************************************************************ */\n\n    mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        console.log(animations);\n        {/*for (let i=0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                setTimeout( () => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                // -> [idx to be overwritten, overwrittign value], \n                setTimeout( () => {\n                    // then get the idx, get the value\n                    const [barOneIdx, newHeight] = animations[i];\n                    // overwritte the old value\n                    arrayBars[barOneIdx].style.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n                \n            }\n        } */}\n\n    }\n    \n    render() {\n        return <div className='array-container'>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                }}></div>\n            ))}\n            <button onClick={() => this.mergeSort(4,1,6,3,2,1)}>Merge Sort</button>\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}