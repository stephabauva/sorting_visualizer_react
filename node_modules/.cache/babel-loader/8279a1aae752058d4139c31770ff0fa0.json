{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms';\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  // the store is accessible because we added Provider in index.js\n  console.log('SortingViz mapStateToProps:', state.listState);\n  return {\n    myStoredList: state.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst INIT_COLOR = 'turquoise';\nconst COMPARE_COLOR = 'red';\nconst OVERWRITTE_COLOR = 'purple';\nconst FINAL_SORTED_COLOR = 'green';\nconst ANIMATION_SPEED_MS = 200;\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n    console.log('this.array:', this.state.array);\n  }\n  /* compare previous list in store to the new actual list generated */\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n    // console.log('this.props:', this.props);\n    if (prevProps.myStoredList !== this.props.myStoredList) {\n      // Do whatever you want\n      // console.log('previous list:',prevProps.lmyStoredList);\n      // console.log('actual list:',this.props.myStoredList);\n      this.setState({\n        array: this.props.myStoredList\n      });\n    }\n  }\n  /* ************************************************************ */\n\n\n  mergeSort() {\n    const animations = doMergeSort(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n\n      const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n\n      if (animations[i] === 'finalViz') {\n        console.log('enter final viz');\n        this.finalViz();\n      } else if (isColorChange) {\n        //if True\n        //then grab the 2 indices of the subarray\n        const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n        // get the style at these two indices\n\n        console.log(i, animations.length);\n        console.log('arrayBars[barOneIdx]:', arrayBars[barOneIdx]);\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style; // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n\n        const color = i % 3 === 0 ? COMPARE_COLOR : INIT_COLOR; // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n        // a condition followed by a question mark (?), then an expression to execute if the condition is \n        // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n        // This operator is frequently used as a shortcut for the if statement.\n        // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n        //using a timeout, slowly change the colors of barOne and barTwo\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n        setTimeout(() => {\n          // then get the idx, get the value\n          const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n          // overwritte the old value\n\n          arrayBars[barOneIdx].style.height = `${newHeight}px`;\n          arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } //finally, color the sorted list in green\n\n\n  finalViz() {\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let f = 0; f < arrayBars.length; f++) {\n      setTimeout(() => {\n        const barStyle = arrayBars[f].style;\n        barStyle.backgroundColor = FINAL_SORTED_COLOR;\n      }, f * ANIMATION_SPEED_MS);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: INIT_COLOR,\n          height: `${value}px`,\n          width: `${2 / 3 * window.innerWidth / this.state.array.length}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","doMergeSort","mapStateToProps","state","console","log","listState","myStoredList","INIT_COLOR","COMPARE_COLOR","OVERWRITTE_COLOR","FINAL_SORTED_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","array","componentDidUpdate","prevProps","prevState","snapshot","setState","mergeSort","animations","i","length","arrayBars","document","getElementsByClassName","isColorChange","finalViz","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","f","barStyle","render","map","value","idx","width","window","innerWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (state) => { // the store is accessible because we added Provider in index.js\n    console.log('SortingViz mapStateToProps:',state.listState);\n    return { myStoredList: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst INIT_COLOR = 'turquoise';\nconst COMPARE_COLOR = 'red';\nconst OVERWRITTE_COLOR = 'purple';\nconst FINAL_SORTED_COLOR = 'green';\nconst ANIMATION_SPEED_MS = 200;\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n            \n        }\n    }\n    /* ************************************************************ */\n\n    mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        console.log(animations);\n        for (let i = 0; i < animations.length-1; i++) {\n\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            \n            if ( animations[i] === 'finalViz') {\n                console.log('enter final viz');\n                this.finalViz();\n            } else if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                console.log(i, animations.length);\n                console.log('arrayBars[barOneIdx]:', arrayBars[barOneIdx]);\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? COMPARE_COLOR : INIT_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                setTimeout( () => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                setTimeout( () => {\n                    // then get the idx, get the value\n                    const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n                    // overwritte the old value\n                    arrayBars[barOneIdx].style.height = `${newHeight}px`;\n                    arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        } \n    }\n\n    //finally, color the sorted list in green\n    finalViz() {\n        const arrayBars = document.getElementsByClassName('array-bar');\n            for (let f=0; f<arrayBars.length; f++) {\n                setTimeout( () => {\n                    const barStyle = arrayBars[f].style;\n                    barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                }, f * ANIMATION_SPEED_MS);\n            } \n   }; \n    \n    render() {\n        return <div className='array-container'>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: INIT_COLOR,\n                    height: `${value}px`,\n                    width: `${(2/3)*window.innerWidth/this.state.array.length}px`,\n                }}></div>\n            ))}\n            <div className='buttons-container'>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n            </div>\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}