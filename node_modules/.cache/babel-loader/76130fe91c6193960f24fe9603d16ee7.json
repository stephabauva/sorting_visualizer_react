{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/components/ArraySlider.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport store from '../store'; //############ START SLIDER & RESET BTN DESIGN  ########\n\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n    padding: 7\n  },\n  margin: {\n    height: theme.spacing(1)\n  }\n}));\n\nfunction ValueLabelComponent(props) {\n  const {\n    children,\n    open,\n    value\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    open: open,\n    enterTouchDelay: 0,\n    placement: \"top\",\n    title: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ValueLabelComponent;\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired\n};\nconst PrettoSlider = withStyles({\n  //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit'\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)'\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider); //############ END SLIDER & RESET BTN DESIGN  ########\n\nexport default function InputArraySlider(props) {\n  _s();\n\n  const classes = useStyles(); // create inital slider value (0) and a function to update it\n\n  const [sliderValue, setSliderValue] = React.useState(0); //handleSliderChange gets the value from the slider\n\n  const handleSliderChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const pumpedValue = newValue * lever;\n\n    if (pumpedValue > 0) {\n      setSliderValue(pumpedValue); //updates the previous value of the slider\n      // create a liste of random number with length of newValue\n\n      const newArray = [...Array(pumpedValue)].map(_ => Math.ceil(Math.random() * 400)); // dispatch the new list: update the store with our new list\n\n      store.dispatch({\n        type: 'SET_LIST',\n        payload: newArray\n      });\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.margin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      gutterBottom: true,\n      children: \"Change the size of the chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PrettoSlider, {\n      valueLabelDisplay: \"auto\",\n      \"aria-label\": \"pretto slider\",\n      defaultValue: 1,\n      max: 1000,\n      onChange: handleSliderChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputArraySlider, \"dysUOHwe4CdfwEs+OL41ECO7+LY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = InputArraySlider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ValueLabelComponent\");\n$RefreshReg$(_c2, \"InputArraySlider\");","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/components/ArraySlider.js"],"names":["React","store","PropTypes","withStyles","makeStyles","Slider","Typography","Tooltip","useStyles","theme","root","width","spacing","padding","margin","height","ValueLabelComponent","props","children","open","value","propTypes","element","isRequired","bool","number","PrettoSlider","color","thumb","backgroundColor","border","marginTop","marginLeft","marginRight","boxShadow","active","valueLabel","left","track","borderRadius","rail","InputArraySlider","classes","sliderValue","setSliderValue","useState","handleSliderChange","event","newValue","lever","pumpedValue","newArray","Array","map","_","Math","ceil","random","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React from 'react';\nimport store from '../store'\n\n//############ START SLIDER & RESET BTN DESIGN  ########\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n    padding: 7,\n  },\n  margin: {\n    height: theme.spacing(1),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({ //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n//############ END SLIDER & RESET BTN DESIGN  ########\nexport default function InputArraySlider(props) {\n  const classes = useStyles();\n    // create inital slider value (0) and a function to update it\n  const [sliderValue, setSliderValue] = React.useState(0);\n\n  //handleSliderChange gets the value from the slider\n  const handleSliderChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const pumpedValue = newValue * lever;\n    if (pumpedValue > 0) {\n      setSliderValue(pumpedValue); //updates the previous value of the slider\n      // create a liste of random number with length of newValue\n      const newArray = [...Array(pumpedValue)].map(_=>Math.ceil(Math.random()*400));\n      // dispatch the new list: update the store with our new list\n      store.dispatch({\n        type: 'SET_LIST',\n        payload: newArray\n      })\n    };\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <Typography gutterBottom>Change the size of the chart</Typography>\n      <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={1} max={1000} onChange={handleSliderChange}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}