{"ast":null,"code":"/*merge sort*/\nexport function doMergeSort(array) {\n  return divide(array);\n}\n\nfunction divide(array) {\n  var midPoint = Math.ceil(array.length / 2); //rounds to next integer\n\n  var leftArray = array.slice(0, midPoint); //from start to middle item (mid item not included)\n\n  var rightArray = array.slice(midPoint); //starts at mid item (includes mid item)\n\n  if (midPoint > 1) {\n    leftArray = divide(leftArray);\n    rightArray = divide(rightArray);\n  }\n\n  return merge(leftArray, rightArray);\n}\n\nfunction merge(leftArray, rightArray) {\n  var leftIndex = 0; // to keep track if we visited all item of the array\n\n  var rightIndex = 0; // same here\n\n  var merged = [];\n\n  while (leftIndex < leftArray.length || rightIndex < rightArray.length) {\n    // ||=OR\n    var leftArrayItem = leftArray[leftIndex];\n    var rightArrayItem = rightArray[rightIndex];\n\n    if (leftArrayItem !== undefined) {\n      //if there is an item an the left\n      if (rightArrayItem === undefined) {\n        //but nothing on the right\n        merged.push(leftArrayItem); //then just push the left item to the ordered list\n\n        leftIndex++;\n      } else {\n        if (leftArrayItem <= rightArrayItem) {\n          //if left exists and is <= to right, just push the left\n          merged.push(leftArrayItem);\n          leftIndex++;\n        } else {\n          merged.push(rightArrayItem); //otherwise, left is > to right so just push the right item\n\n          rightIndex++;\n        }\n      }\n    } else {\n      if (rightArrayItem !== undefined) {\n        merged.push(rightArrayItem);\n        rightIndex++;\n      }\n    }\n  }\n\n  return merged;\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/SortingAlgorithms.js"],"names":["doMergeSort","array","divide","midPoint","Math","ceil","length","leftArray","slice","rightArray","merge","leftIndex","rightIndex","merged","leftArrayItem","rightArrayItem","undefined","push"],"mappings":"AACA;AACA,OAAO,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,SAAOC,MAAM,CAACD,KAAD,CAAb;AACH;;AAED,SAASC,MAAT,CAAgBD,KAAhB,EAAuB;AACnB,MAAIE,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,MAAN,GAAe,CAAzB,CAAf,CADmB,CACyB;;AAC5C,MAAIC,SAAS,GAAGN,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeL,QAAf,CAAhB,CAFmB,CAEuB;;AAC1C,MAAIM,UAAU,GAAGR,KAAK,CAACO,KAAN,CAAYL,QAAZ,CAAjB,CAHmB,CAGqB;;AACxC,MAAIA,QAAQ,GAAG,CAAf,EAAkB;AACdI,IAAAA,SAAS,GAAGL,MAAM,CAACK,SAAD,CAAlB;AACAE,IAAAA,UAAU,GAAGP,MAAM,CAACO,UAAD,CAAnB;AACH;;AACD,SAAOC,KAAK,CAACH,SAAD,EAAYE,UAAZ,CAAZ;AACH;;AACD,SAASC,KAAT,CAAeH,SAAf,EAA0BE,UAA1B,EAAsC;AAClC,MAAIE,SAAS,GAAG,CAAhB,CADkC,CACf;;AACnB,MAAIC,UAAU,GAAG,CAAjB,CAFkC,CAEd;;AACpB,MAAIC,MAAM,GAAG,EAAb;;AACA,SAAOF,SAAS,GAAGJ,SAAS,CAACD,MAAtB,IAAgCM,UAAU,GAAGH,UAAU,CAACH,MAA/D,EAAuE;AAAE;AACrE,QAAIQ,aAAa,GAAGP,SAAS,CAACI,SAAD,CAA7B;AACA,QAAII,cAAc,GAAGN,UAAU,CAACG,UAAD,CAA/B;;AACA,QAAIE,aAAa,KAAKE,SAAtB,EAAiC;AAAE;AAC/B,UAAID,cAAc,KAAKC,SAAvB,EAAkC;AAAE;AAChCH,QAAAA,MAAM,CAACI,IAAP,CAAYH,aAAZ,EAD8B,CACF;;AAC5BH,QAAAA,SAAS;AACZ,OAHD,MAIK;AACD,YAAIG,aAAa,IAAIC,cAArB,EAAqC;AAAE;AACnCF,UAAAA,MAAM,CAACI,IAAP,CAAYH,aAAZ;AACAH,UAAAA,SAAS;AACZ,SAHD,MAIK;AACDE,UAAAA,MAAM,CAACI,IAAP,CAAYF,cAAZ,EADC,CAC4B;;AAC7BH,UAAAA,UAAU;AACb;AACJ;AACJ,KAfD,MAgBK;AACD,UAAIG,cAAc,KAAKC,SAAvB,EAAkC;AAC9BH,QAAAA,MAAM,CAACI,IAAP,CAAYF,cAAZ;AACAH,QAAAA,UAAU;AACb;AACJ;AACJ;;AACD,SAAOC,MAAP;AACH","sourcesContent":["\n/*merge sort*/\nexport function doMergeSort(array) {\n    return divide(array);\n}\n\nfunction divide(array) {\n    var midPoint = Math.ceil(array.length / 2); //rounds to next integer\n    var leftArray = array.slice(0, midPoint); //from start to middle item (mid item not included)\n    var rightArray = array.slice(midPoint); //starts at mid item (includes mid item)\n    if (midPoint > 1) {\n        leftArray = divide(leftArray);\n        rightArray = divide(rightArray);\n    }\n    return merge(leftArray, rightArray);\n}\nfunction merge(leftArray, rightArray) {\n    var leftIndex = 0; // to keep track if we visited all item of the array\n    var rightIndex = 0; // same here\n    var merged = [];\n    while (leftIndex < leftArray.length || rightIndex < rightArray.length) { // ||=OR\n        var leftArrayItem = leftArray[leftIndex];\n        var rightArrayItem = rightArray[rightIndex];\n        if (leftArrayItem !== undefined) { //if there is an item an the left\n            if (rightArrayItem === undefined) { //but nothing on the right\n                merged.push(leftArrayItem); //then just push the left item to the ordered list\n                leftIndex++;\n            }\n            else {\n                if (leftArrayItem <= rightArrayItem) { //if left exists and is <= to right, just push the left\n                    merged.push(leftArrayItem);\n                    leftIndex++;\n                }\n                else {\n                    merged.push(rightArrayItem); //otherwise, left is > to right so just push the right item\n                    rightIndex++;\n                }\n            }\n        }\n        else {\n            if (rightArrayItem !== undefined) {\n                merged.push(rightArrayItem);\n                rightIndex++;\n            }\n        }\n    }\n    return merged;\n}"]},"metadata":{},"sourceType":"module"}