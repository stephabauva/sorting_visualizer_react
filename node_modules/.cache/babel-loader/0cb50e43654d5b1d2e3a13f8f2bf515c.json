{"ast":null,"code":"export function doMergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  animations.push(['finalViz']);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx; //the idx in the real array that will be overwritten\n\n  let i = startIdx; //idxItem1 \n\n  let j = middleIdx + 1; //idxItem2, right after the middle of the array\n  //while neither of the index of the left AND right array have reached the en dof their list,\n  //keep comparing a value from the start-to-mid list to a value from the mid+1-to-end list\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]); //color bars in red\n\n    animations.push([i, j]); //reverts bars in blue\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //the item at idx i of the start-to-mid list is <or= to the item at idx j of the mid+1-to-end list,\n      //therefore, i moves up (i++)\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  } //in the case where we've reached the end of the mid+1-to-end list, \n  //just keep iterating through the start-to-mid list\n\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/SortingAlgorithms.js"],"names":["doMergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","push","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j"],"mappings":"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","sourcesContent":["export function doMergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    animations.push(['finalViz']);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx; //the idx in the real array that will be overwritten\n    let i = startIdx; //idxItem1 \n    let j = middleIdx + 1; //idxItem2, right after the middle of the array\n    //while neither of the index of the left AND right array have reached the en dof their list,\n    //keep comparing a value from the start-to-mid list to a value from the mid+1-to-end list\n    while (i <= middleIdx && j <= endIdx) { \n      animations.push([i, j]); //color bars in red\n      animations.push([i, j]); //reverts bars in blue\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        //the item at idx i of the start-to-mid list is <or= to the item at idx j of the mid+1-to-end list,\n        //therefore, i moves up (i++)\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    //in the case where we've reached the end of the mid+1-to-end list, \n    //just keep iterating through the start-to-mid list\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n}"]},"metadata":{},"sourceType":"module"}