{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  // the store is accessible because we added Provider in index.js\n  console.log('SortingViz mapStateToProps:', state.listState);\n  return {\n    myStoredList: state.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n    console.log('this.array:', this.state.array);\n  }\n  /* compare previous list in store to the new actual list generated */\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n    console.log('this.props:', this.props);\n\n    if (prevProps.myStoredList !== this.props.myStoredList) {\n      // Do whatever you want\n      console.log('previous list:', prevProps.lmyStoredList);\n      console.log('actual list:', this.props.myStoredList);\n      this.setState({\n        array: this.props.myStoredList\n      });\n    }\n  }\n  /* ************************************************************ */\n\n\n  mergeSort() {\n    console.log('merge');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","mapStateToProps","state","console","log","listState","myStoredList","PRIMARY_COLOR","SortingVisualizer","Component","constructor","props","array","componentDidUpdate","prevProps","prevState","snapshot","lmyStoredList","setState","mergeSort","render","map","value","idx","backgroundColor","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAE;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA0CF,KAAK,CAACG,SAAhD;AACA,SAAO;AAAEC,IAAAA,YAAY,EAAEJ,KAAK,CAACG;AAAtB,GAAP;AAED,CAJH,C,CAMA;;;AACA,MAAME,aAAa,GAAG,WAAtB;;AAEA,MAAMC,iBAAN,SAAgCT,KAAK,CAACU,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKT,KAAL,GAAa;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAAb;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKF,KAAL,CAAWU,KAAtC;AACD;AACH;;;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKO,KAAhC;;AACA,QAAIG,SAAS,CAACR,YAAV,KAA2B,KAAKK,KAAL,CAAWL,YAA1C,EAAwD;AACpD;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BU,SAAS,CAACG,aAAvC;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2B,KAAKO,KAAL,CAAWL,YAAtC;AACA,WAAKY,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWL;AAApB,OAAd;AAEH;AACJ;AACD;;;AAEAa,EAAAA,SAAS,GAAG;AACRhB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEH;;AAEDgB,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,iBACF,KAAKlB,KAAL,CAAWU,KAAX,CAAiBS,GAAjB,CAAqB,CAACC,KAAD,EAAQC,GAAR,kBAClB;AACA,QAAA,SAAS,EAAC,WADV;AAGA,QAAA,KAAK,EAAE;AACHC,UAAAA,eAAe,EAAEjB,aADd;AAEHkB,UAAAA,MAAM,EAAG,GAAEH,KAAM;AAFd;AAHP,SAEKC,GAFL;AAAA;AAAA;AAAA;AAAA,cADH,CADE,eAUH;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKJ,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAYH;;AAtC2C;;AA0ChD,eAAenB,OAAO,CAACC,eAAD,CAAP,CAAyBO,iBAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (state) => { // the store is accessible because we added Provider in index.js\n    console.log('SortingViz mapStateToProps:',state.listState);\n    return { myStoredList: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            console.log('previous list:',prevProps.lmyStoredList);\n            console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n            \n        }\n    }\n    /* ************************************************************ */\n\n    mergeSort() {\n        console.log('merge')\n\n    }\n    \n    render() {\n        return <div className='array-container'>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                }}></div>\n            ))}\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}