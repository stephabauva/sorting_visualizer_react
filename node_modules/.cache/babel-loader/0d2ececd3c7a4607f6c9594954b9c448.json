{"ast":null,"code":"const INIT_COLOR = 'turquoise';\nconst PIVOT_VALUE_COLOR = 'red';\nconst COMPARING_COLOR = '#8000ff';\nconst SWAPING_COLOR = 'green';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 10;\nexport function doQuickSort(array) {\n  ;\n  const animations = [];\n  console.log('quick array:', array);\n  const start = 0;\n  const end = array.length - 1;\n  quickSort(array, start, end, animations);\n  console.log('sorted:', array);\n  return animations;\n}\n\nfunction quickSort(arr, start, end, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let index = partition(arr, start, end, animations); // await Promise.all([\n  //     quickSort(arr, start, index-1), \n  //     quickSort(arr, index+1, end)\n  // ]);\n\n  quickSort(arr, start, index - 1, animations);\n  quickSort(arr, index + 1, end, animations);\n}\n\nfunction partition(arr, start, end, animations) {\n  let pivotIndex = start;\n  let pivotValue = arr[end];\n  animations.push([2, start, end]);\n  animations.push([-1, start, end]);\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] < pivotValue) {\n      swap(arr, i, pivotIndex, animations);\n      pivotIndex++;\n    }\n  }\n\n  swap(arr, pivotIndex, end, animations);\n  return pivotIndex;\n}\n\nfunction swap(arr, a, b, animations) {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n  animations.push([1, a, b]);\n  animations.push([-1, a, b]); // console.log(arr);\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/quickSort.js"],"names":["INIT_COLOR","PIVOT_VALUE_COLOR","COMPARING_COLOR","SWAPING_COLOR","FINAL_SORTED_COLOR","ANIMATION_SPEED_MS","doQuickSort","array","animations","console","log","start","end","length","quickSort","arr","index","partition","pivotIndex","pivotValue","push","i","swap","a","b","temp"],"mappings":"AAAA,MAAMA,UAAU,GAAG,WAAnB;AACA,MAAMC,iBAAiB,GAAG,KAA1B;AACA,MAAMC,eAAe,GAAG,SAAxB;AACA,MAAMC,aAAa,GAAG,OAAtB;AACA,MAAMC,kBAAkB,GAAG,SAA3B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AAGA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAC;AAChC,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,KAA5B;AACA,QAAMI,KAAK,GAAG,CAAd;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,GAAa,CAAzB;AACAC,EAAAA,SAAS,CAACP,KAAD,EAAQI,KAAR,EAAeC,GAAf,EAAoBJ,UAApB,CAAT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACA,SAAOC,UAAP;AACD;;AAEH,SAASM,SAAT,CAAmBC,GAAnB,EAAwBJ,KAAxB,EAA+BC,GAA/B,EAAoCJ,UAApC,EAAgD;AAC5C,MAAIG,KAAK,IAAIC,GAAb,EAAkB;AACd;AACH;;AACD,MAAII,KAAK,GAAGC,SAAS,CAACF,GAAD,EAAMJ,KAAN,EAAaC,GAAb,EAAkBJ,UAAlB,CAArB,CAJ4C,CAK5C;AACA;AACA;AACA;;AACAM,EAAAA,SAAS,CAACC,GAAD,EAAMJ,KAAN,EAAaK,KAAK,GAAC,CAAnB,EAAsBR,UAAtB,CAAT;AACAM,EAAAA,SAAS,CAACC,GAAD,EAAMC,KAAK,GAAC,CAAZ,EAAeJ,GAAf,EAAoBJ,UAApB,CAAT;AAEH;;AAED,SAASS,SAAT,CAAmBF,GAAnB,EAAwBJ,KAAxB,EAAgCC,GAAhC,EAAqCJ,UAArC,EAAiD;AAC7C,MAAIU,UAAU,GAAGP,KAAjB;AACA,MAAIQ,UAAU,GAAGJ,GAAG,CAACH,GAAD,CAApB;AACAJ,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAD,EAAIT,KAAJ,EAAWC,GAAX,CAAhB;AACAJ,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAKT,KAAL,EAAYC,GAAZ,CAAhB;;AACA,OAAK,IAAIS,CAAC,GAAGV,KAAb,EAAoBU,CAAC,GAAGT,GAAxB,EAA6BS,CAAC,EAA9B,EAAkC;AAC9B,QAAIN,GAAG,CAACM,CAAD,CAAH,GAASF,UAAb,EAAyB;AACrBG,MAAAA,IAAI,CAACP,GAAD,EAAMM,CAAN,EAASH,UAAT,EAAqBV,UAArB,CAAJ;AACAU,MAAAA,UAAU;AACb;AACJ;;AACDI,EAAAA,IAAI,CAACP,GAAD,EAAMG,UAAN,EAAkBN,GAAlB,EAAuBJ,UAAvB,CAAJ;AACA,SAAOU,UAAP;AACH;;AAGD,SAASI,IAAT,CAAcP,GAAd,EAAmBQ,CAAnB,EAAsBC,CAAtB,EAAyBhB,UAAzB,EAAqC;AACjC,MAAIiB,IAAI,GAAGV,GAAG,CAACQ,CAAD,CAAd;AACAR,EAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACS,CAAD,CAAZ;AACAT,EAAAA,GAAG,CAACS,CAAD,CAAH,GAASC,IAAT;AACAjB,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAD,EAAIG,CAAJ,EAAOC,CAAP,CAAhB;AACAhB,EAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAKG,CAAL,EAAQC,CAAR,CAAhB,EALiC,CAMjC;AACH","sourcesContent":["const INIT_COLOR = 'turquoise';\nconst PIVOT_VALUE_COLOR = 'red';\nconst COMPARING_COLOR = '#8000ff';\nconst SWAPING_COLOR = 'green';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 10;\n\n\nexport function doQuickSort(array) {;\n    const animations = [];\n    console.log('quick array:', array);\n    const start = 0;\n    const end = array.length-1;\n    quickSort(array, start, end, animations);\n    console.log('sorted:', array);\n    return animations;\n  }\n\nfunction quickSort(arr, start, end, animations) {\n    if (start >= end) {\n        return;\n    }\n    let index = partition(arr, start, end, animations);\n    // await Promise.all([\n    //     quickSort(arr, start, index-1), \n    //     quickSort(arr, index+1, end)\n    // ]);\n    quickSort(arr, start, index-1, animations);\n    quickSort(arr, index+1, end, animations)\n\n}\n\nfunction partition(arr, start , end, animations) {\n    let pivotIndex = start;\n    let pivotValue = arr[end];\n    animations.push([2, start, end]);\n    animations.push([-1, start, end]);\n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n            swap(arr, i, pivotIndex, animations);\n            pivotIndex++;\n        }\n    }\n    swap(arr, pivotIndex, end, animations);\n    return pivotIndex;\n}\n\n\nfunction swap(arr, a, b, animations) {\n    let temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n    animations.push([1, a, b]);\n    animations.push([-1, a, b]);\n    // console.log(arr);\n}\n\n"]},"metadata":{},"sourceType":"module"}