{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /****** making this component check ig an element of the store has changed ******/\n} //links:\n// https://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\n// https://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n{\n  /************************************/\n}\n\nconst mapStateToProps = state => {\n  // console.log('slider state:',state);\n  console.log('viz mapStateToProps:', state.listState);\n  return {\n    listState: state.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n    console.log('thisarray:', this.array);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.listState !== this.props.listState) {\n      // Do whatever you want\n      console.log('prevProps.listState:', prevProps.listState);\n      console.log('this.props.listState:', this.props.listState);\n      this.setState({\n        array: this.props.listState\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.array, \"hey\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","mapStateToProps","state","console","log","listState","PRIMARY_COLOR","SortingVisualizer","Component","constructor","props","array","componentDidUpdate","prevProps","prevState","snapshot","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA;AAAC;AAAmF,C,CACpF;AACA;AACA;;AAEA;AAAC;AAAuC;;AAExC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCF,KAAK,CAACG,SAAzC;AACA,SAAO;AAAEA,IAAAA,SAAS,EAAEH,KAAK,CAACG;AAAnB,GAAP;AAED,CALH,C,CAOA;;;AACA,MAAMC,aAAa,GAAG,WAAtB;;AAEA,MAAMC,iBAAN,SAAgCR,KAAK,CAACS,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKR,KAAL,GAAa;AAAES,MAAAA,KAAK,EAAE;AAAT,KAAb;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKO,KAA/B;AACD;;AACHC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAIF,SAAS,CAACR,SAAV,KAAwB,KAAKK,KAAL,CAAWL,SAAvC,EAAkD;AAC9C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCS,SAAS,CAACR,SAA7C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoC,KAAKM,KAAL,CAAWL,SAA/C;AACA,WAAKW,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWL;AAApB,OAAd;AAEH;AACJ;;AAEDY,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA,iBAAM,KAAKf,KAAL,CAAWS,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAlB2C;;AAsBhD,eAAeX,OAAO,CAACC,eAAD,CAAP,CAAyBM,iBAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\n\n{/****** making this component check ig an element of the store has changed ******/}\n//links:\n// https://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\n// https://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n{/************************************/}\n\nconst mapStateToProps = (state) => {\n    // console.log('slider state:',state);\n    console.log('viz mapStateToProps:',state.listState);\n    return { listState: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        console.log('thisarray:', this.array);\n      }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.listState !== this.props.listState) {\n            // Do whatever you want\n            console.log('prevProps.listState:',prevProps.listState);\n            console.log('this.props.listState:',this.props.listState);\n            this.setState({ array: this.props.listState });\n            \n        }\n    }\n    \n    render() {\n        return <div>{this.state.array}hey</div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}