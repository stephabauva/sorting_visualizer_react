{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/MergeSort';\nimport { doQuickSort } from '../sortingAlgorithms/QuickSort';\nimport { doBubbleSort } from '../sortingAlgorithms/BubbleSort';\nimport { doInsertionSort } from '../sortingAlgorithms/InsertionSort';\nimport store from '../store';\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = (...args) => {\n  // the store is accessible because we added Provider in index.js\n  // console.log('SortingViz mapStateToProps:',state.listState);\n  console.log('...args', args);\n  console.log('args[0]', args[0]);\n  console.log(\"args[0]['listReducer']['listState']\", args[0]['listReducer']['listState']);\n  console.log(\"args[0]['sortSpeedReducer']['sortSpeed']\", args[0]['sortSpeedReducer']['sortSpeed']);\n  return {\n    myStoredList: args[0]['listReducer']['listState'],\n    myStoredSpeed: args[0]['sortSpeedReducer']['sortSpeed']\n  };\n}; // This is the main color of the array bars.\n\n\nconst INIT_COLOR = 'turquoise';\nconst RED_COLOR = 'red';\nconst SELECT_COLOR = '#f5bf42';\nvar SWAP_COLOR, OVERWRITTE_COLOR;\nSWAP_COLOR = OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nlet ANIMATION_SPEED_MS = \"\";\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      speed: 45\n    }; // console.log('this.array:', this.state.array);\n  }\n  /* compare previous list in store to the new actual list generated */\n\n\n  checkStore() {\n    console.log('viz', store.getState());\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n    // console.log('this.props:', this.props);\n\n    if (prevProps.myStoredList !== this.props.myStoredList) {\n      // Do whatever you want\n      // console.log('previous list:',prevProps.lmyStoredList);\n      // console.log('actual list:',this.props.myStoredList);\n      this.setState({\n        array: this.props.myStoredList\n      });\n    }\n\n    ANIMATION_SPEED_MS = prevState.myStoredSpeed;\n\n    if (prevProps.myStoredSpeed !== this.props.myStoredSpeed) {\n      ANIMATION_SPEED_MS = this.props.myStoredSpeed;\n    }\n\n    console.log('ANIMATION_SPEED_MS', ANIMATION_SPEED_MS);\n  }\n  /* ************************************************************ */\n  //to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n\n\n  async mergeSort() {\n    const animations = doMergeSort(this.state.array);\n    let endViz = 0;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n\n      const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n\n      if (isColorChange) {\n        //if True\n        //then grab the 2 indices of the subarray\n        const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n        // get the style at these two indices\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style; // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n\n        const color = i % 3 === 0 ? RED_COLOR : INIT_COLOR; // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n        // a condition followed by a question mark (?), then an expression to execute if the condition is \n        // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n        // This operator is frequently used as a shortcut for the if statement.\n        // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n        //using a timeout, slowly change the colors of barOne and barTwo\n        // setTimeout( () => {\n        //     barOneStyle.backgroundColor = color;\n        //     barTwoStyle.backgroundColor = color;\n        // }, i * ANIMATION_SPEED_MS);\n\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n        endViz++;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n      } else {\n        //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n        const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n        // setTimeout( () => {\n        //     // then get the idx, get the value\n        //     // overwritte the old value\n        //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n        //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n        // }, i * ANIMATION_SPEED_MS);\n\n        arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n        arrayBars[barOneIdx].style.height = `${newHeight}px`;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n        arrayBars[barOneIdx].style.backgroundColor = INIT_COLOR;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n        endViz++;\n      }\n    }\n\n    if (endViz === animations.length) {\n      this.finalViz();\n    }\n  }\n\n  async quickSort() {\n    const animations = doQuickSort(this.state.array);\n    console.log(animations);\n    console.log('sorted:', animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (animations[i].length === 2) {\n        const [command, pivotIdx] = animations[i];\n        console.log('cmd pvtidx:', command, pivotIdx);\n        const barPivotStyle = arrayBars[pivotIdx].style;\n        barPivotStyle.backgroundColor = RED_COLOR;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n      } else {\n        console.log('else:', i);\n        const [command, barOneIdx, barTwoIdx] = animations[i];\n        console.log(command, barOneIdx, barTwoIdx);\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n        console.log(typeof command);\n\n        switch (command) {\n          case -2:\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n            const temp = barOneStyle.height;\n            barOneStyle.height = barTwoStyle.height;\n            barTwoStyle.height = temp;\n            await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS)); // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n\n            break;\n\n          case -3:\n            barOneStyle.backgroundColor = INIT_COLOR;\n            barTwoStyle.backgroundColor = INIT_COLOR;\n            await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS)); // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n\n            break;\n\n          default:\n            barOneStyle.backgroundColor = INIT_COLOR;\n            barTwoStyle.backgroundColor = INIT_COLOR;\n        }\n      }\n\n      if (i === animations.length - 1) {\n        this.finalViz();\n      }\n    }\n  }\n\n  async bubbleSort() {\n    console.log(this.state.array);\n    const animations = doBubbleSort(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [command, barOneIdx, barTwoIdx] = animations[i];\n      console.log('barTwoIdx:', barTwoIdx, 'arrayBars.length', arrayBars.length);\n\n      if (barTwoIdx === arrayBars.length) {\n        continue;\n      }\n\n      console.log(i, command, barOneIdx, barTwoIdx);\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      switch (command) {\n        case 0:\n          barOneStyle.backgroundColor = INIT_COLOR;\n          barTwoStyle.backgroundColor = INIT_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        case 1:\n          barOneStyle.backgroundColor = RED_COLOR;\n          barTwoStyle.backgroundColor = RED_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        case 2:\n          arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = OVERWRITTE_COLOR;\n          const temp = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = temp;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        default:\n          barOneStyle.backgroundColor = INIT_COLOR;\n          barTwoStyle.backgroundColor = INIT_COLOR;\n      }\n\n      ;\n\n      if (i === animations.length - 1) {\n        this.finalViz();\n      }\n    }\n\n    ;\n  }\n\n  async insertionSort() {\n    const animations = doInsertionSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      switch (animations[i][0]) {\n        case 0:\n          const keyIdxInit = animations[i][1];\n          const barOneStyleInit = arrayBars[keyIdxInit].style;\n          barOneStyleInit.backgroundColor = INIT_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        case 1:\n          const keyIdxOne = animations[i][1];\n          const barOneStyleOne = arrayBars[keyIdxOne].style;\n          barOneStyleOne.backgroundColor = RED_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        case 2:\n          const barIdxTwo = animations[i][1];\n          const barOneStyleTwo = arrayBars[barIdxTwo].style;\n          barOneStyleTwo.backgroundColor = SELECT_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n\n        case 3:\n          const barIdxThree = animations[i][1];\n          const barOneStyleThree = arrayBars[barIdxThree].style;\n          barOneStyleThree.backgroundColor = OVERWRITTE_COLOR;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n\n        case 4:\n          const [command, barOneIdx, key] = animations[i];\n          const barOneStyle4 = arrayBars[barOneIdx].style;\n          barOneStyle4.height = `${key}px`;\n          await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n          break;\n      }\n\n      if (i === animations.length - 1) {\n        this.finalViz();\n      }\n    }\n  } //finally, color the sorted list in green\n\n\n  async finalViz() {\n    console.log('in final viz');\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let f = 0; f < arrayBars.length; f++) {\n      // setTimeout( () => {\n      //     const barStyle = arrayBars[f].style;\n      //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n      // }, f * ANIMATION_SPEED_MS * 2);\n      const barStyle = arrayBars[f].style;\n      barStyle.backgroundColor = FINAL_SORTED_COLOR;\n      await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sort-button\",\n          style: {\n            backgroundColor: \"#b5ff87\"\n          },\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sort-button\",\n          style: {\n            backgroundColor: \"#ffdf87\"\n          },\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sort-button\",\n          style: {\n            backgroundColor: \"#87fff9\"\n          },\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sort-button\",\n          style: {\n            backgroundColor: \"#ff8787\"\n          },\n          onClick: () => this.insertionSort(),\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.checkStore(),\n          children: \"check store\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this), this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: INIT_COLOR,\n          height: `${value}px`,\n          width: `${1.50 / 3 * window.innerWidth / this.state.array.length}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","doMergeSort","doQuickSort","doBubbleSort","doInsertionSort","store","mapStateToProps","args","console","log","myStoredList","myStoredSpeed","INIT_COLOR","RED_COLOR","SELECT_COLOR","SWAP_COLOR","OVERWRITTE_COLOR","FINAL_SORTED_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","speed","checkStore","getState","componentDidUpdate","prevProps","prevState","snapshot","setState","mergeSort","animations","endViz","i","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","Promise","resolve","setTimeout","newHeight","height","finalViz","quickSort","command","pivotIdx","barPivotStyle","temp","bubbleSort","insertionSort","keyIdxInit","barOneStyleInit","keyIdxOne","barOneStyleOne","barIdxTwo","barOneStyleTwo","barIdxThree","barOneStyleThree","key","barOneStyle4","f","barStyle","render","map","value","idx","width","window","innerWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/MergeSort'\nimport { doQuickSort } from '../sortingAlgorithms/QuickSort'\nimport { doBubbleSort } from '../sortingAlgorithms/BubbleSort'\nimport { doInsertionSort } from '../sortingAlgorithms/InsertionSort'\nimport store from '../store'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (...args) => { // the store is accessible because we added Provider in index.js\n    // console.log('SortingViz mapStateToProps:',state.listState);\n    console.log('...args', args)\n    console.log('args[0]', args[0])\n    console.log(\"args[0]['listReducer']['listState']\", args[0]['listReducer']['listState'])\n    console.log(\"args[0]['sortSpeedReducer']['sortSpeed']\", args[0]['sortSpeedReducer']['sortSpeed'])\n    return { myStoredList: args[0]['listReducer']['listState'], myStoredSpeed: args[0]['sortSpeedReducer']['sortSpeed'] };\n    \n  };\n\n// This is the main color of the array bars.\nconst INIT_COLOR = 'turquoise';\nconst RED_COLOR = 'red';\nconst SELECT_COLOR = '#f5bf42';\nvar SWAP_COLOR, OVERWRITTE_COLOR;\nSWAP_COLOR = OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nlet ANIMATION_SPEED_MS = \"\";\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [], speed: 45};\n        // console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    checkStore(){\n        console.log('viz', store.getState())\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n        }\n        ANIMATION_SPEED_MS = prevState.myStoredSpeed;\n        if (prevProps.myStoredSpeed !== this.props.myStoredSpeed) {\n            ANIMATION_SPEED_MS = this.props.myStoredSpeed }\n        console.log('ANIMATION_SPEED_MS', ANIMATION_SPEED_MS)\n    }\n    /* ************************************************************ */\n//to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n    async mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        let endViz = 0;\n        for (let i = 0; i < animations.length; i++) {\n\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? RED_COLOR : INIT_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                // setTimeout( () => {\n                //     barOneStyle.backgroundColor = color;\n                //     barTwoStyle.backgroundColor = color;\n                // }, i * ANIMATION_SPEED_MS);\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                endViz++;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n                // setTimeout( () => {\n                //     // then get the idx, get the value\n                    \n                //     // overwritte the old value\n                //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                // }, i * ANIMATION_SPEED_MS);\n                arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                arrayBars[barOneIdx].style.backgroundColor = INIT_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                endViz++;\n            }\n        } \n\n        if (endViz === animations.length ) {\n            this.finalViz();\n        }\n    }\n\n    async quickSort() {\n        const animations = doQuickSort(this.state.array);\n        console.log(animations);\n        console.log('sorted:',animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            if (animations[i].length === 2) {\n                const [command, pivotIdx] =  animations[i];\n                console.log('cmd pvtidx:', command, pivotIdx);\n                const barPivotStyle = arrayBars[pivotIdx].style;\n                barPivotStyle.backgroundColor = RED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n            console.log('else:', i);\n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log(command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n            console.log(typeof command);\n            switch(command) {\n                case -2:\n                    barOneStyle.backgroundColor = SWAP_COLOR;\n                    barTwoStyle.backgroundColor = SWAP_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                  break;\n                case -3:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n              }\n            }\n            \n              if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        }\n    }\n\n    async bubbleSort() {\n        console.log(this.state.array);\n        const animations = doBubbleSort(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log('barTwoIdx:', barTwoIdx, 'arrayBars.length', arrayBars.length);\n            if (barTwoIdx === arrayBars.length) {\n                continue;\n            }\n            console.log(i, command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            switch(command) {\n                case 0: \n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    barOneStyle.backgroundColor = RED_COLOR;\n                    barTwoStyle.backgroundColor = RED_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    arrayBars[barTwoIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n            };\n            if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        };\n    }\n\n    async insertionSort() {\n        const animations = doInsertionSort(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            switch(animations[i][0]) {\n                case 0:\n                    const keyIdxInit = animations[i][1];\n                    const barOneStyleInit = arrayBars[keyIdxInit].style;\n                    barOneStyleInit.backgroundColor= INIT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    const keyIdxOne = animations[i][1];\n                    const barOneStyleOne = arrayBars[keyIdxOne].style;\n                    barOneStyleOne.backgroundColor= RED_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    const barIdxTwo = animations[i][1];\n                    const barOneStyleTwo = arrayBars[barIdxTwo].style;\n                    barOneStyleTwo.backgroundColor= SELECT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 3:\n                    const barIdxThree = animations[i][1];\n                    const barOneStyleThree = arrayBars[barIdxThree].style;\n                    barOneStyleThree.backgroundColor= OVERWRITTE_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                case 4:\n                    const [command, barOneIdx, key] = animations[i];\n                    const barOneStyle4 = arrayBars[barOneIdx].style;\n                    barOneStyle4.height = `${key}px`;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                } \n                if (i === animations.length-1 ) {\n                    this.finalViz();\n                }   \n            }\n          \n        }\n    \n//finally, color the sorted list in green\n  async finalViz() {\n      console.log('in final viz');\n        const arrayBars = document.getElementsByClassName('array-bar');\n            for (let f=0; f<arrayBars.length; f++) {\n                // setTimeout( () => {\n                //     const barStyle = arrayBars[f].style;\n                //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                // }, f * ANIMATION_SPEED_MS * 2);\n                const barStyle = arrayBars[f].style;\n                barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } \n   }; \n    \n    render() {\n        return <div className='array-container'>\n            <div className='buttons-container'>\n                <button className=\"sort-button\" style={{backgroundColor:\"#b5ff87\"}} onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ffdf87\"}} onClick={() => this.quickSort()}>Quick Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#87fff9\"}}onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ff8787\"}}onClick={() => this.insertionSort()}>Insertion Sort</button>\n                <button onClick={() => this.checkStore()}>check store</button>\n            </div>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: INIT_COLOR,\n                    height: `${value}px`,\n                    width: `${(1.50/3)*window.innerWidth/this.state.array.length}px`,\n                }}></div>\n            ))}\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}