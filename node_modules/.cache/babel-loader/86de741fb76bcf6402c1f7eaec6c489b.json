{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms';\nimport { doQuickSort } from '../sortingAlgorithms/quickSort';\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  // the store is accessible because we added Provider in index.js\n  // console.log('SortingViz mapStateToProps:',state.listState);\n  return {\n    myStoredList: state.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst INIT_COLOR = 'turquoise';\nconst COMPARE_COLOR = 'red';\nconst OVERWRITTE_COLOR = '#8000ff';\nconst SWAP_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 10;\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    }; // console.log('this.array:', this.state.array);\n  }\n  /* compare previous list in store to the new actual list generated */\n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n    // console.log('this.props:', this.props);\n    if (prevProps.myStoredList !== this.props.myStoredList) {\n      // Do whatever you want\n      // console.log('previous list:',prevProps.lmyStoredList);\n      // console.log('actual list:',this.props.myStoredList);\n      this.setState({\n        array: this.props.myStoredList\n      });\n    }\n  }\n  /* ************************************************************ */\n  //to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n\n\n  async mergeSort() {\n    const animations = doMergeSort(this.state.array);\n    let endViz = 0;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n\n      const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n\n      if (isColorChange) {\n        //if True\n        //then grab the 2 indices of the subarray\n        const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n        // get the style at these two indices\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style; // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n\n        const color = i % 3 === 0 ? COMPARE_COLOR : INIT_COLOR; // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n        // a condition followed by a question mark (?), then an expression to execute if the condition is \n        // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n        // This operator is frequently used as a shortcut for the if statement.\n        // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n        //using a timeout, slowly change the colors of barOne and barTwo\n        // setTimeout( () => {\n        //     barOneStyle.backgroundColor = color;\n        //     barTwoStyle.backgroundColor = color;\n        // }, i * ANIMATION_SPEED_MS);\n\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n        endViz++;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n      } else {\n        //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n        const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n        // setTimeout( () => {\n        //     // then get the idx, get the value\n        //     // overwritte the old value\n        //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n        //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n        // }, i * ANIMATION_SPEED_MS);\n\n        arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n        arrayBars[barOneIdx].style.height = `${newHeight}px`;\n        endViz++;\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n      }\n    }\n\n    if (endViz === animations.length) {\n      this.finalViz();\n    }\n  }\n\n  async quickSort() {\n    const animations = doQuickSort(this.state.array);\n    console.log(animations); // console.log('sorted:',animations);\n    // for (let i = 0; i < animations.length; i++) {\n    //     const arrayBars = document.getElementsByClassName('array-bar'); \n    //     const [command, barOneIdx, barTwoIdx] = animations[i];\n    //     console.log(command, barOneIdx, barTwoIdx);\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n    //     console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n    //     console.log(typeof command);\n    //     switch(command) {\n    //         case -1:\n    //           barOneStyle.backgroundColor = COMPARE_COLOR;\n    //           barTwoStyle.backgroundColor = COMPARE_COLOR;\n    //           await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //         //   await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //           break;\n    //         case -2:\n    //             barOneStyle.backgroundColor = SWAP_COLOR;\n    //             barTwoStyle.backgroundColor = SWAP_COLOR;\n    //             const temp = barOneStyle.height;\n    //             barOneStyle.height = barTwoStyle.height;\n    //             barTwoStyle.height = temp;\n    //             await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //             // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //           break;\n    //         case -3:\n    //             barOneStyle.backgroundColor = INIT_COLOR;\n    //             barTwoStyle.backgroundColor = INIT_COLOR;\n    //             await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //             // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    //             break\n    //         default:\n    //             barOneStyle.backgroundColor = INIT_COLOR;\n    //             barTwoStyle.backgroundColor = INIT_COLOR;\n    //       }\n    //       if (i === animations.length-1 ) {\n    //         this.finalViz();\n    //     }\n    // }\n  } //finally, color the sorted list in green\n\n\n  async finalViz() {\n    console.log('in final viz');\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    for (let f = 0; f < arrayBars.length; f++) {\n      // setTimeout( () => {\n      //     const barStyle = arrayBars[f].style;\n      //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n      // }, f * ANIMATION_SPEED_MS * 2);\n      const barStyle = arrayBars[f].style;\n      barStyle.backgroundColor = FINAL_SORTED_COLOR;\n      await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: INIT_COLOR,\n          height: `${value}px`,\n          width: `${1.50 / 3 * window.innerWidth / this.state.array.length}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps)(SortingVisualizer);","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["React","connect","doMergeSort","doQuickSort","mapStateToProps","state","myStoredList","listState","INIT_COLOR","COMPARE_COLOR","OVERWRITTE_COLOR","SWAP_COLOR","FINAL_SORTED_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","array","componentDidUpdate","prevProps","prevState","snapshot","setState","mergeSort","animations","endViz","i","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","Promise","resolve","setTimeout","newHeight","height","finalViz","quickSort","console","log","f","barStyle","render","map","value","idx","width","window","innerWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/SortingAlgorithms'\nimport { doQuickSort } from '../sortingAlgorithms/quickSort'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (state) => { // the store is accessible because we added Provider in index.js\n    // console.log('SortingViz mapStateToProps:',state.listState);\n    return { myStoredList: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst INIT_COLOR = 'turquoise';\nconst COMPARE_COLOR = 'red';\nconst OVERWRITTE_COLOR = '#8000ff';\nconst SWAP_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 10;\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        // console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n            \n        }\n    }\n    /* ************************************************************ */\n//to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n    async mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        let endViz = 0;\n        for (let i = 0; i < animations.length; i++) {\n\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? COMPARE_COLOR : INIT_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                // setTimeout( () => {\n                //     barOneStyle.backgroundColor = color;\n                //     barTwoStyle.backgroundColor = color;\n                // }, i * ANIMATION_SPEED_MS);\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                endViz++;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n                // setTimeout( () => {\n                //     // then get the idx, get the value\n                    \n                //     // overwritte the old value\n                //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                // }, i * ANIMATION_SPEED_MS);\n                arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                endViz++;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            }\n        } \n\n        if (endViz === animations.length ) {\n            this.finalViz();\n        }\n    }\n\n    async quickSort() {\n        const animations = doQuickSort(this.state.array);\n        console.log(animations);\n        // console.log('sorted:',animations);\n        // for (let i = 0; i < animations.length; i++) {\n        //     const arrayBars = document.getElementsByClassName('array-bar'); \n        //     const [command, barOneIdx, barTwoIdx] = animations[i];\n        //     console.log(command, barOneIdx, barTwoIdx);\n        //     const barOneStyle = arrayBars[barOneIdx].style;\n        //     const barTwoStyle = arrayBars[barTwoIdx].style;\n        //     console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n        //     console.log(typeof command);\n        //     switch(command) {\n        //         case -1:\n        //           barOneStyle.backgroundColor = COMPARE_COLOR;\n        //           barTwoStyle.backgroundColor = COMPARE_COLOR;\n        //           await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //         //   await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //           break;\n        //         case -2:\n        //             barOneStyle.backgroundColor = SWAP_COLOR;\n        //             barTwoStyle.backgroundColor = SWAP_COLOR;\n        //             const temp = barOneStyle.height;\n        //             barOneStyle.height = barTwoStyle.height;\n        //             barTwoStyle.height = temp;\n        //             await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //             // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //           break;\n        //         case -3:\n        //             barOneStyle.backgroundColor = INIT_COLOR;\n        //             barTwoStyle.backgroundColor = INIT_COLOR;\n        //             await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //             // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n        //             break\n        //         default:\n        //             barOneStyle.backgroundColor = INIT_COLOR;\n        //             barTwoStyle.backgroundColor = INIT_COLOR;\n        //       }\n        //       if (i === animations.length-1 ) {\n        //         this.finalViz();\n        //     }\n        // }\n    }\n\n//finally, color the sorted list in green\n  async finalViz() {\n      console.log('in final viz');\n        const arrayBars = document.getElementsByClassName('array-bar');\n            for (let f=0; f<arrayBars.length; f++) {\n                // setTimeout( () => {\n                //     const barStyle = arrayBars[f].style;\n                //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                // }, f * ANIMATION_SPEED_MS * 2);\n                const barStyle = arrayBars[f].style;\n                barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } \n   }; \n    \n    render() {\n        return <div className='array-container'>\n            <div className='buttons-container'>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n            </div>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: INIT_COLOR,\n                    height: `${value}px`,\n                    width: `${(1.50/3)*window.innerWidth/this.state.array.length}px`,\n                }}></div>\n            ))}\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);"]},"metadata":{},"sourceType":"module"}