{"ast":null,"code":"var _jsxFileName = \"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js\";\nimport store from '../store';\nimport React, { useState } from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /****** SUBSCRIBE(listener) ******/\n} // subscribe(listener) -> Adds a change listener:\n// It will be called any time an action is dispatched, and some \n// part of the state tree may potentially have changed.\n//Link: https://redux.js.org/api/store#subscribelistener\n// function select(state) {\n//     return state\n// }\n// function handleChange() {\n//     const currentValue = select(store.getState().listState);\n//     // console.log('handleChange:',currentValue)\n//     return SortingVisualizer(currentValue);\n//     }\n// const unsubscribe = store.subscribe(handleChange);\n// unsubscribe()\n\n{\n  /************************************/\n}\n\nconst mapStateToProps = state => {\n  // console.log('slider state:',state);\n  console.log('viz mapStateToProps:', state.listReducer.listState);\n  return {\n    listState: state.listReducer.listState\n  };\n}; // This is the main color of the array bars.\n\n\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n  render() {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: \"HEY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  } // const generatedList = unsubscribe\n  // had error: generatedList.map is not a function\n  // so I pushed all items of the object generatedList into a new empty list \n\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.listState !== this.props.listState) {\n      // Do whatever you want\n      console.log('prevProps:', prevProps);\n    }\n  } // const array = [];\n  // const resetArray = () => {\n  //     for (let i = 0; i < generatedList.length; i++) {\n  //         array.push(generatedList[i]);\n  // }}\n  // resetArray();\n  // console.log('array:',array);\n  // console.log('generatedList:',generatedList);\n  // console.log('is array:',Array.isArray(generatedList));\n  // {/****************************************** */}\n  // return (\n  // <div className=\"array-container\">\n  //   </div>\n  // );\n\n\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js"],"names":["store","React","useState","connect","mapStateToProps","state","console","log","listReducer","listState","PRIMARY_COLOR","SortingVisualizer","Component","render","componentDidUpdate","prevProps","prevState","snapshot","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA;AAAC;AAAoC,C,CACrC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAC;AAAuC;;AAExC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCF,KAAK,CAACG,WAAN,CAAkBC,SAArD;AACA,SAAO;AAAEA,IAAAA,SAAS,EAAEJ,KAAK,CAACG,WAAN,CAAkBC;AAA/B,GAAP;AAED,CALH,C,CAOA;;;AACA,MAAMC,aAAa,GAAG,WAAtB;;AAEA,MAAMC,iBAAN,SAAgCV,KAAK,CAACW,SAAtC,CAAgD;AAC5CC,EAAAA,MAAM,GAAG;AACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAH2C,CAI5C;AACA;AACA;;;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAIF,SAAS,CAACN,SAAV,KAAwB,KAAKS,KAAL,CAAWT,SAAvC,EAAkD;AAC9C;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBQ,SAAzB;AACH;AACJ,GAZ2C,CAa5C;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5B4C","sourcesContent":["import store from '../store';\nimport React, { useState } from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\n\n{/****** SUBSCRIBE(listener) ******/}\n// subscribe(listener) -> Adds a change listener:\n// It will be called any time an action is dispatched, and some \n// part of the state tree may potentially have changed.\n//Link: https://redux.js.org/api/store#subscribelistener\n\n// function select(state) {\n//     return state\n// }\n\n// function handleChange() {\n//     const currentValue = select(store.getState().listState);\n//     // console.log('handleChange:',currentValue)\n//     return SortingVisualizer(currentValue);\n//     }\n\n// const unsubscribe = store.subscribe(handleChange);\n// unsubscribe()\n\n{/************************************/}\n\nconst mapStateToProps = (state) => {\n    // console.log('slider state:',state);\n    console.log('viz mapStateToProps:',state.listReducer.listState);\n    return { listState: state.listReducer.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\nclass SortingVisualizer extends React.Component {\n    render() {\n      <div>HEY</div> \n    } \n    // const generatedList = unsubscribe\n    // had error: generatedList.map is not a function\n    // so I pushed all items of the object generatedList into a new empty list \n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.listState !== this.props.listState) {\n            // Do whatever you want\n            console.log('prevProps:',prevProps)\n        }\n    }\n    // const array = [];\n   \n    // const resetArray = () => {\n    //     for (let i = 0; i < generatedList.length; i++) {\n    //         array.push(generatedList[i]);\n    // }}\n    // resetArray();\n    // console.log('array:',array);\n\n    // console.log('generatedList:',generatedList);\n    // console.log('is array:',Array.isArray(generatedList));\n    // {/****************************************** */}\n    // return (\n    // <div className=\"array-container\">\n    //   </div>\n    // );\n}"]},"metadata":{},"sourceType":"module"}