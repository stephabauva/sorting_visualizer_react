{"ast":null,"code":"const PIVOT_COLOR = 'red';\nconst OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 100;\nconst arrayBars = document.getElementsByClassName('array-bar');\nexport function doQuickSort(array) {\n  console.log('array:', array);\n  const start = 0;\n  const end = array.length - 1;\n  quickSort(array, start, end);\n  return array;\n}\n\nfunction quickSort(arr, start, end) {\n  if (start >= end) {\n    return;\n  }\n\n  let index = partition(arr, start, end); // await Promise.all([\n  //     quickSort(arr, start, index-1), \n  //     quickSort(arr, index+1, end)\n  // ]);\n\n  quickSort(arr, start, index - 1);\n  quickSort(arr, index + 1, end);\n}\n\nfunction partition(arr, start, end) {\n  let pivotIndex = start;\n  let pivotValue = arr[end];\n  arrayBars[pivotIndex].style.backgroundColor = PIVOT_COLOR;\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] < pivotValue) {\n      swap(arr, i, pivotIndex);\n      pivotIndex++;\n    }\n  }\n\n  swap(arr, pivotIndex, end);\n  return pivotIndex;\n}\n\nasync function swap(arr, a, b) {\n  // console.log('arrayBars swap:', arrayBars);\n  // await sleep(10);\n  let temp = arr[a];\n  arrayBars[a].style.height = `${arr[b]}px`;\n  arrayBars[b].style.height = `${temp}px`;\n  arr[a] = arr[b];\n  arr[b] = temp;\n  let tempBarA = arrayBars[a].style.height;\n  console.log(temp, tempBarA);\n  await new Promise(resolve => setTimeout(resolve, ANIMATION_SPEED_MS));\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/quickSort.js"],"names":["PIVOT_COLOR","OVERWRITTE_COLOR","FINAL_SORTED_COLOR","ANIMATION_SPEED_MS","arrayBars","document","getElementsByClassName","doQuickSort","array","console","log","start","end","length","quickSort","arr","index","partition","pivotIndex","pivotValue","style","backgroundColor","i","swap","a","b","temp","height","tempBarA","Promise","resolve","setTimeout","sleep","ms"],"mappings":"AAAA,MAAMA,WAAW,GAAG,KAApB;AACA,MAAMC,gBAAgB,GAAG,SAAzB;AACA,MAAMC,kBAAkB,GAAG,SAA3B;AACA,MAAMC,kBAAkB,GAAG,GAA3B;AACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,QAAMG,KAAK,GAAG,CAAd;AACA,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,GAAa,CAAzB;AACAC,EAAAA,SAAS,CAACN,KAAD,EAAQG,KAAR,EAAeC,GAAf,CAAT;AACA,SAAOJ,KAAP;AACD;;AAEH,SAASM,SAAT,CAAmBC,GAAnB,EAAwBJ,KAAxB,EAA+BC,GAA/B,EAAoC;AAChC,MAAID,KAAK,IAAIC,GAAb,EAAkB;AACd;AACH;;AACD,MAAII,KAAK,GAAGC,SAAS,CAACF,GAAD,EAAMJ,KAAN,EAAaC,GAAb,CAArB,CAJgC,CAKhC;AACA;AACA;AACA;;AACAE,EAAAA,SAAS,CAACC,GAAD,EAAMJ,KAAN,EAAaK,KAAK,GAAC,CAAnB,CAAT;AACAF,EAAAA,SAAS,CAACC,GAAD,EAAMC,KAAK,GAAC,CAAZ,EAAeJ,GAAf,CAAT;AAEH;;AAED,SAASK,SAAT,CAAmBF,GAAnB,EAAwBJ,KAAxB,EAAgCC,GAAhC,EAAqC;AACjC,MAAIM,UAAU,GAAGP,KAAjB;AACA,MAAIQ,UAAU,GAAGJ,GAAG,CAACH,GAAD,CAApB;AACAR,EAAAA,SAAS,CAACc,UAAD,CAAT,CAAsBE,KAAtB,CAA4BC,eAA5B,GAA8CrB,WAA9C;;AACA,OAAK,IAAIsB,CAAC,GAAGX,KAAb,EAAoBW,CAAC,GAAGV,GAAxB,EAA6BU,CAAC,EAA9B,EAAkC;AAC9B,QAAIP,GAAG,CAACO,CAAD,CAAH,GAASH,UAAb,EAAyB;AACrBI,MAAAA,IAAI,CAACR,GAAD,EAAMO,CAAN,EAASJ,UAAT,CAAJ;AACAA,MAAAA,UAAU;AACb;AACJ;;AACDK,EAAAA,IAAI,CAACR,GAAD,EAAMG,UAAN,EAAkBN,GAAlB,CAAJ;AACA,SAAOM,UAAP;AACH;;AAED,eAAeK,IAAf,CAAoBR,GAApB,EAAyBS,CAAzB,EAA4BC,CAA5B,EAA+B;AAE3B;AACA;AACA,MAAIC,IAAI,GAAGX,GAAG,CAACS,CAAD,CAAd;AACApB,EAAAA,SAAS,CAACoB,CAAD,CAAT,CAAaJ,KAAb,CAAmBO,MAAnB,GAA6B,GAAEZ,GAAG,CAACU,CAAD,CAAI,IAAtC;AACArB,EAAAA,SAAS,CAACqB,CAAD,CAAT,CAAaL,KAAb,CAAmBO,MAAnB,GAA6B,GAAED,IAAK,IAApC;AACAX,EAAAA,GAAG,CAACS,CAAD,CAAH,GAAST,GAAG,CAACU,CAAD,CAAZ;AACAV,EAAAA,GAAG,CAACU,CAAD,CAAH,GAASC,IAAT;AACA,MAAIE,QAAQ,GAAGxB,SAAS,CAACoB,CAAD,CAAT,CAAaJ,KAAb,CAAmBO,MAAlC;AACAlB,EAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ,EAAkBE,QAAlB;AACA,QAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU3B,kBAAV,CAAnC,CAAN;AAEH;;AAED,SAAS6B,KAAT,CAAeC,EAAf,EAAmB;AACf,SAAO,IAAIJ,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUG,EAAV,CAAjC,CAAP;AACH","sourcesContent":["const PIVOT_COLOR = 'red';\nconst OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 100;\nconst arrayBars = document.getElementsByClassName('array-bar')\n\nexport function doQuickSort(array) {\n    console.log('array:', array);\n    const start = 0;\n    const end = array.length-1;\n    quickSort(array, start, end);\n    return array;\n  }\n\nfunction quickSort(arr, start, end) {\n    if (start >= end) {\n        return;\n    }\n    let index = partition(arr, start, end);\n    // await Promise.all([\n    //     quickSort(arr, start, index-1), \n    //     quickSort(arr, index+1, end)\n    // ]);\n    quickSort(arr, start, index-1);\n    quickSort(arr, index+1, end)\n\n}\n\nfunction partition(arr, start , end) {\n    let pivotIndex = start;\n    let pivotValue = arr[end];\n    arrayBars[pivotIndex].style.backgroundColor = PIVOT_COLOR;\n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n            swap(arr, i, pivotIndex);\n            pivotIndex++;\n        }\n    }\n    swap(arr, pivotIndex, end);\n    return pivotIndex;\n}\n\nasync function swap(arr, a, b) {\n    \n    // console.log('arrayBars swap:', arrayBars);\n    // await sleep(10);\n    let temp = arr[a];\n    arrayBars[a].style.height = `${arr[b]}px`;\n    arrayBars[b].style.height = `${temp}px`;\n    arr[a] = arr[b];\n    arr[b] = temp;\n    let tempBarA = arrayBars[a].style.height;\n    console.log(temp, tempBarA);\n    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n    \n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}"]},"metadata":{},"sourceType":"module"}