{"ast":null,"code":"export function doMergeSort(array){console.log('merge array:',array);var animations=[];if(array.length<=1)return array;var auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx)return;var middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){var k=startIdx;//the idx in the real array that will be overwritten\nvar i=startIdx;//idxItem1 \nvar j=middleIdx+1;//idxItem2, right after the middle of the array\n//while neither of the index of the left AND right array have reached the en dof their list,\n//keep comparing a value from the start-to-mid list to a value from the mid+1-to-end list\nwhile(i<=middleIdx&&j<=endIdx){animations.push([i,j]);//color bars in red\nanimations.push([i,j]);//reverts bars in blue\nif(auxiliaryArray[i]<=auxiliaryArray[j]){//the item at idx i of the start-to-mid list is <or= to the item at idx j of the mid+1-to-end list,\n//therefore, i moves up (i++)\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}else{// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}//in the case where we've reached the end of the mid+1-to-end list, \n//just keep iterating through the start-to-mid list\nwhile(i<=middleIdx){animations.push([i,i]);animations.push([i,i]);// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([j,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([j,j]);// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}","map":{"version":3,"sources":["/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/MergeSort.js"],"names":["doMergeSort","array","console","log","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["export function doMergeSort(array) {\n  console.log('merge array:', array);\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx; //the idx in the real array that will be overwritten\n    let i = startIdx; //idxItem1 \n    let j = middleIdx + 1; //idxItem2, right after the middle of the array\n    //while neither of the index of the left AND right array have reached the en dof their list,\n    //keep comparing a value from the start-to-mid list to a value from the mid+1-to-end list\n    while (i <= middleIdx && j <= endIdx) { \n      animations.push([i, j]); //color bars in red\n      animations.push([i, j]); //reverts bars in blue\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        //the item at idx i of the start-to-mid list is <or= to the item at idx j of the mid+1-to-end list,\n        //therefore, i moves up (i++)\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    //in the case where we've reached the end of the mid+1-to-end list, \n    //just keep iterating through the start-to-mid list\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n}"]},"metadata":{},"sourceType":"module"}