[{"/Users/urdoom/sorting_visualizer_react/src/index.js":"1","/Users/urdoom/sorting_visualizer_react/src/reportWebVitals.js":"2","/Users/urdoom/sorting_visualizer_react/src/App.js":"3","/Users/urdoom/sorting_visualizer_react/src/components/Menu.js":"4","/Users/urdoom/sorting_visualizer_react/src/components/GenerateList.js":"5","/Users/urdoom/sorting_visualizer_react/src/redux/action.js":"6","/Users/urdoom/sorting_visualizer_react/src/store.js":"7","/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/sortingVisualizer.js":"8","/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js":"9","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/quickSort.js":"10","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/bubbleSort.js":"11","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/BubbleSort.js":"12","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/QuickSort.js":"13","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/InsertionSort.js":"14","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/MergeSort.js":"15","/Users/urdoom/sorting_visualizer_react/src/components/ArraySlider.js":"16","/Users/urdoom/sorting_visualizer_react/src/components/SpeedSlider.js":"17","/Users/urdoom/sorting_visualizer_react/src/components/Explanations.js":"18","/Users/urdoom/sorting_visualizer_react/src/redux/ArrayReducer.js":"19","/Users/urdoom/sorting_visualizer_react/src/redux/SpeedReducer.js":"20"},{"size":1062,"mtime":1614953247834,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1614953247834,"results":"23","hashOfConfig":"22"},{"size":1511,"mtime":1614953247832,"results":"24","hashOfConfig":"22"},{"size":1144,"mtime":1614953247833,"results":"25","hashOfConfig":"22"},{"size":576,"mtime":1612777700041,"results":"26","hashOfConfig":"22"},{"size":111,"mtime":1612863351187,"results":"27","hashOfConfig":"22"},{"size":731,"mtime":1614954148854,"results":"28","hashOfConfig":"22"},{"size":279,"mtime":1612870750241,"results":"29","hashOfConfig":"22"},{"size":13972,"mtime":1614953422659,"results":"30","hashOfConfig":"22"},{"size":1331,"mtime":1613382887768,"results":"31","hashOfConfig":"22"},{"size":945,"mtime":1613385568005,"results":"32","hashOfConfig":"22"},{"size":945,"mtime":1614953247834,"results":"33","hashOfConfig":"22"},{"size":1331,"mtime":1614953434500,"results":"34","hashOfConfig":"22"},{"size":714,"mtime":1614953247834,"results":"35","hashOfConfig":"22"},{"size":2903,"mtime":1614953247834,"results":"36","hashOfConfig":"22"},{"size":2664,"mtime":1614953247832,"results":"37","hashOfConfig":"22"},{"size":2612,"mtime":1614953247833,"results":"38","hashOfConfig":"22"},{"size":374,"mtime":1614953247833,"results":"39","hashOfConfig":"22"},{"size":305,"mtime":1614954203620,"results":"40","hashOfConfig":"22"},{"size":294,"mtime":1614954222213,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1p1t5sz",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/urdoom/sorting_visualizer_react/src/index.js",[],["89","90"],"/Users/urdoom/sorting_visualizer_react/src/reportWebVitals.js",[],"/Users/urdoom/sorting_visualizer_react/src/App.js",["91"],"import SimpleMenu from \"./components/Menu\"\nimport InputArraySlider from \"./components/ArraySlider\"\nimport InputSpeedSlider from \"./components/SpeedSlider\"\nimport Explanations from \"./components/Explanations\"\n// import Languages from \"./components/displayRawCode\" #for future implementation\nimport SortingVisualizer from \"./sortingVisualizer/SortingVisualizer\"\nimport './App.css';\nimport React from \"react\";\n\nfunction App(props) {\n  // const [size, setSize] = useState([]);\n\n  // function getArraySize(ArraySize) { //update size so the slider does not move when dom re-renders\n  //   const newSize = {ArraySize};\n  //   setSize([size, newSize]);\n  //   // console.log(newSize.ArraySize);\n  // }\n\n  // const menuList = props.menus.map(menu => (\n  //   <SimpleMenu\n  //   id = {menu.id}\n  //   sort_cat = {menu.sort_cat}\n  //   sort_algo = {menu.sort_algo}\n  //   key = {menu.id}\n  //   />\n  // ));\n  return (\n    <div className=\"App\">\n      <div className=\"appName\"><h1>Sorting Visualizer</h1></div>\n        <div id=\"topbar\">\n            <div id=\"slider-button-container\"><InputArraySlider /></div>\n            <div id=\"slider-button-container\"><InputSpeedSlider /></div>\n            <div id=\"explanations-block\"><Explanations /></div>\n            {/* <div id=\"menu-container\">{menuList}</div> */}\n        </div>\n        {/* <div id=\"languages-container\"><Languages /></div> #for future implementation */}\n        <div id=\"visualizer-container\"><SortingVisualizer /></div>\n    </div>\n\n  );\n}\n\nexport default App;\n","/Users/urdoom/sorting_visualizer_react/src/components/Menu.js",["92"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport default function SimpleMenu(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  // console.log(props)\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n//   const id = props.id;\n  const sort_cat = props.sort_cat;\n  const sort_algo = props.sort_algo;\n  // console.log(sort_algo);\n\n  return (\n    <div className=\"button-menus\">\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            {sort_cat}\n        </Button>\n        <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n        >\n            <MenuItem onClick={handleClose}>Merge Sort</MenuItem>\n            <MenuItem onClick={handleClose}>My account</MenuItem>\n            <MenuItem onClick={handleClose}>Logout</MenuItem>\n        </Menu>\n    </div>\n\n  );\n}\n","/Users/urdoom/sorting_visualizer_react/src/components/GenerateList.js",["93"],"/Users/urdoom/sorting_visualizer_react/src/redux/action.js",[],"/Users/urdoom/sorting_visualizer_react/src/store.js",["94"],"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/sortingVisualizer.js",[],"/Users/urdoom/sorting_visualizer_react/src/sortingVisualizer/SortingVisualizer.js",["95","96","97"],"import React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/MergeSort'\nimport { doQuickSort } from '../sortingAlgorithms/QuickSort'\nimport { doBubbleSort } from '../sortingAlgorithms/BubbleSort'\nimport { doInsertionSort } from '../sortingAlgorithms/InsertionSort'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (state) => { // the store is accessible because we added Provider in index.js\n    // console.log('SortingViz mapStateToProps:',state.listState);\n    return { myStoredList: state.listState };\n    \n  };\n\n// This is the main color of the array bars.\nconst INIT_COLOR = 'turquoise';\nconst RED_COLOR = 'red';\nconst SELECT_COLOR = '#f5bf42';\nvar SWAP_COLOR, OVERWRITTE_COLOR;\nSWAP_COLOR = OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 55;\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [] };\n        // console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n            \n        }\n    }\n    /* ************************************************************ */\n//to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n    async mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        let endViz = 0;\n        for (let i = 0; i < animations.length; i++) {\n\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? RED_COLOR : INIT_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                // setTimeout( () => {\n                //     barOneStyle.backgroundColor = color;\n                //     barTwoStyle.backgroundColor = color;\n                // }, i * ANIMATION_SPEED_MS);\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                endViz++;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n                // setTimeout( () => {\n                //     // then get the idx, get the value\n                    \n                //     // overwritte the old value\n                //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                // }, i * ANIMATION_SPEED_MS);\n                arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                arrayBars[barOneIdx].style.backgroundColor = INIT_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                endViz++;\n            }\n        } \n\n        if (endViz === animations.length ) {\n            this.finalViz();\n        }\n    }\n\n    async quickSort() {\n        const animations = doQuickSort(this.state.array);\n        console.log(animations);\n        console.log('sorted:',animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            if (animations[i].length === 2) {\n                const [command, pivotIdx] =  animations[i];\n                console.log('cmd pvtidx:', command, pivotIdx);\n                const barPivotStyle = arrayBars[pivotIdx].style;\n                barPivotStyle.backgroundColor = RED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n            console.log('else:', i);\n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log(command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n            console.log(typeof command);\n            switch(command) {\n                case -2:\n                    barOneStyle.backgroundColor = SWAP_COLOR;\n                    barTwoStyle.backgroundColor = SWAP_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                  break;\n                case -3:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n              }\n            }\n            \n              if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        }\n    }\n\n    async bubbleSort() {\n        console.log(this.state.array);\n        const animations = doBubbleSort(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log('barTwoIdx:', barTwoIdx, 'arrayBars.length', arrayBars.length);\n            if (barTwoIdx === arrayBars.length) {\n                continue;\n            }\n            console.log(i, command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            switch(command) {\n                case 0: \n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    barOneStyle.backgroundColor = RED_COLOR;\n                    barTwoStyle.backgroundColor = RED_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    arrayBars[barTwoIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n            };\n            if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        };\n    }\n\n    async insertionSort() {\n        const animations = doInsertionSort(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            switch(animations[i][0]) {\n                case 0:\n                    const keyIdxInit = animations[i][1];\n                    const barOneStyleInit = arrayBars[keyIdxInit].style;\n                    barOneStyleInit.backgroundColor= INIT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    const keyIdxOne = animations[i][1];\n                    const barOneStyleOne = arrayBars[keyIdxOne].style;\n                    barOneStyleOne.backgroundColor= RED_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    const barIdxTwo = animations[i][1];\n                    const barOneStyleTwo = arrayBars[barIdxTwo].style;\n                    barOneStyleTwo.backgroundColor= SELECT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 3:\n                    const barIdxThree = animations[i][1];\n                    const barOneStyleThree = arrayBars[barIdxThree].style;\n                    barOneStyleThree.backgroundColor= OVERWRITTE_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                case 4:\n                    const [command, barOneIdx, key] = animations[i];\n                    const barOneStyle4 = arrayBars[barOneIdx].style;\n                    barOneStyle4.height = `${key}px`;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                } \n                if (i === animations.length-1 ) {\n                    this.finalViz();\n                }   \n            }\n          \n        }\n    \n//finally, color the sorted list in green\n  async finalViz() {\n      console.log('in final viz');\n        const arrayBars = document.getElementsByClassName('array-bar');\n            for (let f=0; f<arrayBars.length; f++) {\n                // setTimeout( () => {\n                //     const barStyle = arrayBars[f].style;\n                //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                // }, f * ANIMATION_SPEED_MS * 2);\n                const barStyle = arrayBars[f].style;\n                barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } \n   }; \n    \n    render() {\n        return <div className='array-container'>\n            <div className='buttons-container'>\n                <button className=\"sort-button\" style={{backgroundColor:\"#b5ff87\"}} onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ffdf87\"}} onClick={() => this.quickSort()}>Quick Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#87fff9\"}}onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ff8787\"}}onClick={() => this.insertionSort()}>Insertion Sort</button>\n            </div>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: INIT_COLOR,\n                    height: `${value}px`,\n                    width: `${(1.50/3)*window.innerWidth/this.state.array.length}px`,\n                }}></div>\n            ))}\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/quickSort.js",["98","99","100","101","102","103"],"/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/bubbleSort.js",["104"],"/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/BubbleSort.js",["105"],"export function doBubbleSort(array) {\n    const n = array.length;\n    const animations = [];\n    compare(array, n, animations);\n    console.log('sorted:', array);\n    return animations;\n\n    function compare(array, n, animations) {\n        for (let i=0; i<=array.length; i++) {\n            let swapped = false;\n            for (let j=0; j<= n-i-1; j++) {\n                animations.push([1, j, j+1]); //select\n                if (array[j] > array[j+1]) {\n                    animations.push([2, j, j+1]); //swap\n                    swap(array, j, j+1)\n                    swapped = true;\n                    animations.push([0, j, j+1]); //back to normal\n                }\n                animations.push([0, j, j+1]); //back to normal\n            }\n            if (swapped == false) {\n                break\n            }\n        };\n    }\n}\n\nfunction swap(array, a, b) {\n    const temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}","/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/QuickSort.js",["106","107","108","109","110","111"],"/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/InsertionSort.js",[],"/Users/urdoom/sorting_visualizer_react/src/sortingAlgorithms/MergeSort.js",[],"/Users/urdoom/sorting_visualizer_react/src/components/ArraySlider.js",["112","113"],"import React from 'react';\nimport store from '../store'\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n  },\n  margin: {\n    height: theme.spacing(1),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({ //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default function InputArraySlider(props) {\n  const classes = useStyles();\n    // create inital slider value (0) and a function to update it\n  const [sliderValue, setSliderValue] = React.useState(0);\n\n  //handleSliderChange gets the value from the slider\n  const handleSliderChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const pumpedValue = newValue * lever;\n    if (pumpedValue > 0) {\n      setSliderValue(pumpedValue); //updates the previous value of the slider\n      // create a liste of random number with length of newValue\n      const newArray = [...Array(pumpedValue)].map(_=>Math.ceil(Math.random()*400));\n      // dispatch the new list: update the store with our new list\n      store.dispatch({\n        type: 'SET_LIST',\n        payload: newArray\n      })\n    };\n  };\n\n  const handleSpeedChange = (event, newValue) => {};\n\n  function reloadPage() {\n    window.location.reload();\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <Typography gutterBottom>Change the size of the chart</Typography>\n      <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={0} onChange={handleSliderChange}/>\n      <button onClick={() => reloadPage()}>Reset your list</button>\n    </div>\n  );\n}\n","/Users/urdoom/sorting_visualizer_react/src/components/SpeedSlider.js",["114","115","116"],"import React from 'react';\nimport store from '../store'\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n  },\n  margin: {\n    height: theme.spacing(1),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({ //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default function InputSpeedSlider(props) {\n  const classes = useStyles();\n    // create inital slider value (0) and a function to update it\n  const [sliderValue, setSliderValue] = React.useState(0);\n\n  //handleSliderChange gets the value from the slider\n  const handleSliderChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const pumpedValue = newValue * lever;\n    if (pumpedValue > 0) {\n      setSliderValue(pumpedValue); //updates the previous value of the slider\n      // create a liste of random number with length of newValue\n      const newArray = [...Array(pumpedValue)].map(_=>Math.ceil(Math.random()*400));\n      // dispatch the new list: update the store with our new list\n      store.dispatch({\n        type: 'SET_LIST',\n        payload: newArray\n      })\n    };\n  };\n\n  const handleSpeedChange = (event, newValue) => {};\n\n  function reloadPage() {\n    window.location.reload();\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <Typography gutterBottom>Change the sorting speed (ms)</Typography>\n      <PrettoSlider valueLabelDisplay=\"auto\"  defaultValue={25} onChange={handleSpeedChange}/>\n      <div className={classes.margin} />\n    </div>\n  );\n}\n","/Users/urdoom/sorting_visualizer_react/src/components/Explanations.js",[],"/Users/urdoom/sorting_visualizer_react/src/redux/ArrayReducer.js",[],"/Users/urdoom/sorting_visualizer_react/src/redux/SpeedReducer.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":18},{"ruleId":"121","severity":1,"message":"125","line":20,"column":9,"nodeType":"123","messageId":"124","endLine":20,"endColumn":18},{"ruleId":"121","severity":1,"message":"126","line":11,"column":13,"nodeType":"123","messageId":"124","endLine":11,"endColumn":20},{"ruleId":"121","severity":1,"message":"127","line":11,"column":7,"nodeType":"123","messageId":"124","endLine":11,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":201,"column":13,"nodeType":"130","messageId":"131","endLine":231,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":225,"column":17,"nodeType":"134","messageId":"135","endLine":230,"endColumn":27},{"ruleId":"121","severity":1,"message":"136","line":226,"column":28,"nodeType":"123","messageId":"124","endLine":226,"endColumn":35},{"ruleId":"121","severity":1,"message":"137","line":1,"column":7,"nodeType":"123","messageId":"124","endLine":1,"endColumn":17},{"ruleId":"121","severity":1,"message":"138","line":2,"column":7,"nodeType":"123","messageId":"124","endLine":2,"endColumn":24},{"ruleId":"121","severity":1,"message":"139","line":3,"column":7,"nodeType":"123","messageId":"124","endLine":3,"endColumn":22},{"ruleId":"121","severity":1,"message":"140","line":4,"column":7,"nodeType":"123","messageId":"124","endLine":4,"endColumn":20},{"ruleId":"121","severity":1,"message":"141","line":5,"column":7,"nodeType":"123","messageId":"124","endLine":5,"endColumn":25},{"ruleId":"121","severity":1,"message":"142","line":6,"column":7,"nodeType":"123","messageId":"124","endLine":6,"endColumn":25},{"ruleId":"143","severity":1,"message":"144","line":15,"column":25,"nodeType":"145","messageId":"146","endLine":15,"endColumn":27},{"ruleId":"143","severity":1,"message":"144","line":21,"column":25,"nodeType":"145","messageId":"146","endLine":21,"endColumn":27},{"ruleId":"121","severity":1,"message":"137","line":1,"column":7,"nodeType":"123","messageId":"124","endLine":1,"endColumn":17},{"ruleId":"121","severity":1,"message":"138","line":2,"column":7,"nodeType":"123","messageId":"124","endLine":2,"endColumn":24},{"ruleId":"121","severity":1,"message":"139","line":3,"column":7,"nodeType":"123","messageId":"124","endLine":3,"endColumn":22},{"ruleId":"121","severity":1,"message":"140","line":4,"column":7,"nodeType":"123","messageId":"124","endLine":4,"endColumn":20},{"ruleId":"121","severity":1,"message":"141","line":5,"column":7,"nodeType":"123","messageId":"124","endLine":5,"endColumn":25},{"ruleId":"121","severity":1,"message":"142","line":6,"column":7,"nodeType":"123","messageId":"124","endLine":6,"endColumn":25},{"ruleId":"121","severity":1,"message":"147","line":70,"column":10,"nodeType":"123","messageId":"124","endLine":70,"endColumn":21},{"ruleId":"121","severity":1,"message":"148","line":89,"column":9,"nodeType":"123","messageId":"124","endLine":89,"endColumn":26},{"ruleId":"121","severity":1,"message":"147","line":70,"column":10,"nodeType":"123","messageId":"124","endLine":70,"endColumn":21},{"ruleId":"121","severity":1,"message":"149","line":73,"column":9,"nodeType":"123","messageId":"124","endLine":73,"endColumn":27},{"ruleId":"121","severity":1,"message":"150","line":91,"column":12,"nodeType":"123","messageId":"124","endLine":91,"endColumn":22},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'SimpleMenu' is defined but never used.","Identifier","unusedVar","'sort_algo' is assigned a value but never used.","'myArray' is assigned a value but never used.","'rootReducer' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'command' is assigned a value but never used.","'INIT_COLOR' is assigned a value but never used.","'PIVOT_VALUE_COLOR' is assigned a value but never used.","'COMPARING_COLOR' is assigned a value but never used.","'SWAPING_COLOR' is assigned a value but never used.","'FINAL_SORTED_COLOR' is assigned a value but never used.","'ANIMATION_SPEED_MS' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sliderValue' is assigned a value but never used.","'handleSpeedChange' is assigned a value but never used.","'handleSliderChange' is assigned a value but never used.","'reloadPage' is defined but never used.","no-global-assign","no-unsafe-negation"]