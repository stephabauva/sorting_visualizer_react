{"version":3,"sources":["redux/ArrayReducer.js","redux/SpeedReducer.js","store.js","components/ArraySlider.js","components/SpeedSlider.js","components/Explanations.js","config/particlesConfig.js","sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/BubbleSort.js","sortingAlgorithms/InsertionSort.js","sortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["listInit","rawList","listReducer","state","action","type","listState","payload","speedInit","niceSpeed","sortSpeedReducer","sortSpeed","customMiddleWare","store","next","rootReducer","combineReducers","createStore","applyMiddleware","useStyles","makeStyles","theme","root","width","spacing","padding","margin","height","PrettoSlider","withStyles","color","thumb","backgroundColor","border","marginTop","marginLeft","marginRight","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","InputArraySlider","props","classes","React","useState","setSliderValue","className","Typography","gutterBottom","valueLabelDisplay","aria-label","defaultValue","min","max","onChange","event","newValue","pumpedValue","newArray","Array","map","_","Math","ceil","random","dispatch","InputSpeedSlider","INITIAL_SPEED","getState","newSpeed","Explanations","particlesConfig","doMergeSort","array","console","log","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","floor","k","i","j","push","doMerge","doQuickSort","end","quickSort","arr","start","index","pivotIndex","pivotValue","swap","partition","a","b","temp","doBubbleSort","n","swapped","compare","doInsertionSort","init_array","key","SWAP_COLOR","OVERWRITTE_COLOR","INIT_COLOR","RED_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","speed","prevProps","prevState","snapshot","myStoredList","this","setState","initialSortingSpeed","myStoredSpeed","endViz","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","Promise","resolve","setTimeout","newHeight","finalViz","command","pivotIdx","keyIdxInit","keyIdxOne","barIdxTwo","barIdxThree","f","onClick","mergeSort","bubbleSort","insertionSort","position","params","value","idx","window","innerWidth","Component","connect","args","App","Helmet","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e3ba9bfe.chunk.js","sourcesContent":["const listInit = {\n    rawList: [],\n  };\n\nconst listReducer = (state = listInit, action) => {\n    switch (action.type) {\n      case \"SET_LIST\":\n        return {\n          ...state,\n          listState: action.payload,\n        };\n      default:\n        return state;\n    }\n  };\n\nexport default listReducer;","const speedInit = {\n    niceSpeed: 35,\n  }\n\nconst sortSpeedReducer = (state = speedInit, action) => {\nswitch (action.type) {\n    case \"SET_SORT_SPEED\":\n    return {\n        ...state,\n        sortSpeed: action.payload,\n    };\n    default:\n    return state;\n}\n};\n\nexport default sortSpeedReducer;","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport listReducer from './redux/ArrayReducer';\nimport sortSpeedReducer from './redux/SpeedReducer'\n\n//customMiddleWare gets triggered when the the value of the list in the store changes\n//just for demo, not affecting any component\nconst customMiddleWare = store => next => action => {\n    // console.log(\"Middleware triggered:\", action); // uncomment and check the console\n    next(action);\n  }\nconst rootReducer = combineReducers({listReducer, sortSpeedReducer})\n// const store = createStore(listReducer, applyMiddleware(customMiddleWare));\nconst store = createStore(rootReducer, applyMiddleware(customMiddleWare));\n\nexport default (customMiddleWare, store);","import React from 'react';\nimport store from '../store'\n\n//############ START SLIDER & RESET BTN DESIGN  ########\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n    padding: 7,\n  },\n  margin: {\n    height: theme.spacing(1),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({ //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n//############ END SLIDER & RESET BTN DESIGN  ########\nexport default function InputArraySlider(props) {\n  const classes = useStyles();\n    // create inital slider value (0) and a function to update it\n  const [sliderValue, setSliderValue] = React.useState(0);\n\n  //handleSliderChange gets the value from the slider\n  const handleSliderChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const pumpedValue = newValue * lever;\n    if (pumpedValue > 0) {\n      setSliderValue(pumpedValue); //updates the previous value of the slider\n      // create a liste of random number with length of newValue\n      const newArray = [...Array(pumpedValue)].map(_=>Math.ceil(Math.random()*400));\n      // dispatch the new list: update the store with our new list\n      store.dispatch({\n        type: 'SET_LIST',\n        payload: newArray\n      })\n    };\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <Typography gutterBottom>Change the size of the chart</Typography>\n      <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={1} min={1} max={300} onChange={handleSliderChange}/>\n    </div>\n  );\n}\n","import React from 'react';\nimport store from '../store'\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2,\n    padding: 7,\n  },\n  margin: {\n    height: theme.spacing(1),\n  },\n}));\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst PrettoSlider = withStyles({ //styled-component ?\n  root: {\n    color: '#52af77',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: 0,\n    marginRight: 10,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nexport default function InputSpeedSlider(props) {\n  const INITIAL_SPEED = store.getState()['sortSpeedReducer']['niceSpeed']\n  const classes = useStyles();\n    // create inital slider value (0) and a function to update it\n  const [sliderValue, setSliderValue] = React.useState(0);\n\n  //handleSpeedChange gets the value from the slider\n  const handleSpeedChange = (event, newValue) => {\n    // console.log(newValue);\n    const lever = 1;\n    const newSpeed = newValue * lever;\n    if (newSpeed >= 0) {\n      setSliderValue(newSpeed); //updates the previous value of the slider\n      // dispatch the new list: update the store with our new list\n      store.dispatch({\n        type: 'SET_SORT_SPEED',\n        payload: newSpeed\n      })\n    };\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <Typography gutterBottom>Slow the sorting speed down (ms)</Typography>\n      <PrettoSlider valueLabelDisplay=\"auto\"  defaultValue={INITIAL_SPEED} max={1000} onChange={handleSpeedChange}/>\n    </div>\n  );\n}\n","export default function Explanations(props) {\n   \nreturn(\n    <div>\n    <pre>1. Use the 1st slider on the far left to generate between 1 and 300 bars</pre>\n    <pre>2. (Optional) Use the 2st slider to alter the sorting speed (MAX = 1s)</pre>\n    <pre>3. Choose a sorting algorithm and enjoy the ride!</pre>\n    <pre>4. Repeat from step 1. and have fun 🙂</pre>\n    </div>\n)}","const particlesConfig = {\n  \"particles\": {\n    \"number\": {\n      \"value\": 100,\n      \"density\": {\n        \"enable\": true,\n        \"value_area\": 600\n      }\n    },\n    \"color\": {\n      \"value\": \"#ffffff\"\n    },\n    \"shape\": {\n      \"type\": \"circle\",\n      \"stroke\": {\n        \"width\": 0,\n        \"color\": \"#000000\"\n      },\n      \"polygon\": {\n        \"nb_sides\": 5\n      },\n      \"image\": {\n        \"src\": \"img/github.svg\",\n        \"width\": 100,\n        \"height\": 100\n      }\n    },\n    \"opacity\": {\n      \"value\": 0.5,\n      \"random\": false,\n      \"anim\": {\n        \"enable\": false,\n        \"speed\": 1,\n        \"opacity_min\": 0.1,\n        \"sync\": false\n      }\n    },\n    \"size\": {\n      \"value\": 3,\n      \"random\": true,\n      \"anim\": {\n        \"enable\": false,\n        \"speed\": 40,\n        \"size_min\": 0.1,\n        \"sync\": false\n      }\n    },\n    \"line_linked\": {\n      \"enable\": true,\n      \"distance\": 150,\n      \"color\": \"#ffffff\",\n      \"opacity\": 0.4,\n      \"width\": 1\n    },\n    \"move\": {\n      \"enable\": true,\n      \"speed\": 5,\n      \"direction\": \"none\",\n      \"random\": true,\n      \"straight\": false,\n      \"out_mode\": \"out\",\n      \"bounce\": false,\n      \"attract\": {\n        \"enable\": false,\n        \"rotateX\": 600,\n        \"rotateY\": 1200\n      }\n    }\n  },\n  \"interactivity\": {\n    \"detect_on\": \"window\",\n    \"events\": {\n      \"onhover\": {\n        \"enable\": true,\n        \"mode\": \"repulse\"\n      },\n      \"onclick\": {\n        \"enable\": false,\n        \"mode\": \"bubble\"\n      },\n      \"resize\": true\n    },\n    \"modes\": {\n      \"grab\": {\n        \"distance\": 400,\n        \"line_linked\": {\n          \"opacity\": 1\n        }\n      },\n      \"bubble\": {\n        \"distance\": 400,\n        \"size\": 40,\n        \"duration\": 2,\n        \"opacity\": 8,\n        \"speed\": 3\n      },\n      \"repulse\": {\n        \"distance\": 200,\n        \"duration\": 0.4\n      },\n      \"push\": {\n        \"particles_nb\": 4\n      },\n      \"remove\": {\n        \"particles_nb\": 2\n      }\n    }\n  },\n  \"retina_detect\": true\n  }\n\n  export default particlesConfig;","export function doMergeSort(array) {\n  console.log('merge array:', array);\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx; //the idx in the real array that will be overwritten\n    let i = startIdx; //idxItem1 \n    let j = middleIdx + 1; //idxItem2, right after the middle of the array\n    //while neither of the index of the left AND right array have reached the en dof their list,\n    //keep comparing a value from the start-to-mid list to a value from the mid+1-to-end list\n    while (i <= middleIdx && j <= endIdx) { \n      animations.push([i, j]); //color bars in red\n      animations.push([i, j]); //reverts bars in blue\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        //the item at idx i of the start-to-mid list is <or= to the item at idx j of the mid+1-to-end list,\n        //therefore, i moves up (i++)\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    //in the case where we've reached the end of the mid+1-to-end list, \n    //just keep iterating through the start-to-mid list\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n}","const INIT_COLOR = 'turquoise';\nconst PIVOT_VALUE_COLOR = 'red';\nconst COMPARING_COLOR = '#8000ff';\nconst SWAPING_COLOR = 'green';\nconst FINAL_SORTED_COLOR = '#7dff84';\nconst ANIMATION_SPEED_MS = 10;\n\n\nexport function doQuickSort(array) {;\n    const animations = [];\n    console.log('quick array:', array);\n    const start = 0;\n    const end = array.length-1;\n    animations.push([-1, end]);\n    quickSort(array, start, end, animations);\n    console.log('sorted:', array);\n    return animations;\n  }\n\nfunction quickSort(arr, start, end, animations) {\n    if (start >= end) {\n        return;\n    }\n    let index = partition(arr, start, end, animations);\n    quickSort(arr, start, index-1, animations);\n    quickSort(arr, index+1, end, animations)\n\n}\n\nfunction partition(arr, start , end, animations) {\n    let pivotIndex = start;\n    let pivotValue = arr[end];\n    animations.push([-1, end]);\n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n            swap(arr, i, pivotIndex, animations);\n            pivotIndex++;\n        }\n    }\n    swap(arr, pivotIndex, end, animations);\n    return pivotIndex;\n}\n\n\nfunction swap(arr, a, b, animations) {\n    let temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n    animations.push([-2, a, b]);\n    animations.push([-3, a, b]);\n    \n    // console.log(arr);\n}\n\n","export function doBubbleSort(array) {\n    const n = array.length;\n    const animations = [];\n    compare(array, n, animations);\n    console.log('sorted:', array);\n    return animations;\n\n    function compare(array, n, animations) {\n        for (let i=0; i<=array.length; i++) {\n            let swapped = false;\n            for (let j=0; j<= n-i-1; j++) {\n                animations.push([1, j, j+1]); //select\n                if (array[j] > array[j+1]) {\n                    animations.push([2, j, j+1]); //swap\n                    swap(array, j, j+1)\n                    swapped = true;\n                    animations.push([0, j, j+1]); //back to normal\n                }\n                animations.push([0, j, j+1]); //back to normal\n            }\n            if (swapped == false) {\n                break\n            }\n        };\n    }\n}\n\nfunction swap(array, a, b) {\n    const temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}","export function doInsertionSort(init_array) {\n    const animations = [];\n    const array = init_array.slice();\n    console.log(array);\n    for (let i=1; i<array.length; i++) {\n        let key = array[i];\n        animations.push([1, i]); //red\n        let j = i-1;\n        while (j>=0 && key<array[j]) {\n            animations.push([2, j+1]); //purple\n            array[j + 1] = array[j];\n            animations.push([4, j+1, array[j]]);\n            animations.push([3, j+1]);\n            animations.push([0, j+1]);\n            j-=1;\n        }\n        array[j+1]=key;\n        animations.push([4, j+1, key]);\n        // animations.push([0, j+1, key]);\n    }\n    console.log('sorted:', array);\n    return animations\n}","import Particles from 'react-particles-js';\nimport particlesConfig from '../config/particlesConfig';\nimport React from \"react\";\nimport './SortingVisualizer.css';\nimport { connect } from 'react-redux';\nimport { doMergeSort } from '../sortingAlgorithms/MergeSort'\nimport { doQuickSort } from '../sortingAlgorithms/QuickSort'\nimport { doBubbleSort } from '../sortingAlgorithms/BubbleSort'\nimport { doInsertionSort } from '../sortingAlgorithms/InsertionSort'\n\n/* ***** making this component check ig an element of the store has changed ******\nlinks:\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di\nhttps://stackoverflow.com/questions/36557089/how-to-listen-for-specific-property-changes-in-redux-store-after-an-action-is-di \n\n*********************************** */\n\nconst mapStateToProps = (...args) => { // the store is accessible because we added Provider in index.js\n    // console.log('SortingViz mapStateToProps:',state.listState);\n    console.log('...args', args)\n    console.log('args[0]', args[0])\n    console.log(\"args[0]['listReducer']['listState']\", args[0]['listReducer']['listState'])\n    console.log(\"args[0]['sortSpeedReducer']['sortSpeed']\", args[0]['sortSpeedReducer']['sortSpeed'])\n    return { \n        myStoredList: args[0]['listReducer']['listState'], \n        initialSortingSpeed: args[0]['sortSpeedReducer']['niceSpeed'],\n        myStoredSpeed: args[0]['sortSpeedReducer']['sortSpeed'] \n    };\n    \n  };\n\n// This is the main color of the array bars.\nconst INIT_COLOR = 'turquoise';\nconst RED_COLOR = 'red';\nconst SELECT_COLOR = '#f5bf42';\nvar SWAP_COLOR, OVERWRITTE_COLOR;\nSWAP_COLOR = OVERWRITTE_COLOR = '#8000ff';\nconst FINAL_SORTED_COLOR = '#7dff84';\nlet ANIMATION_SPEED_MS = \"\";\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { array: [], speed: ''};\n        // console.log('this.array:', this.state.array);\n      }\n    /* compare previous list in store to the new actual list generated */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('prevprops:', prevProps); // -> { myStoredList: Array(..), dispatch: f }\n        // console.log('this.props:', this.props);\n        if (prevProps.myStoredList !== this.props.myStoredList) {\n            // Do whatever you want\n            // console.log('previous list:',prevProps.lmyStoredList);\n            // console.log('actual list:',this.props.myStoredList);\n            this.setState({ array: this.props.myStoredList });\n        }\n        // console.log('ANIMATION_SPEED_MS BEFORE', ANIMATION_SPEED_MS)\n        //if the speed slider was not moved (myStoredSpeed is undefined), just use the default value (35 in SpeedReducer.js)\n        if (! ANIMATION_SPEED_MS) {\n            ANIMATION_SPEED_MS = prevProps.initialSortingSpeed ;\n            console.log('ANIMATION_SPEED_MS initial', ANIMATION_SPEED_MS)\n        }    \n        //if the slider was moved then use the current new speed slider value\n        if (prevProps.myStoredSpeed !== this.props.myStoredSpeed) {\n            ANIMATION_SPEED_MS = this.props.myStoredSpeed \n            console.log('ANIMATION_SPEED_MS AFTER', ANIMATION_SPEED_MS)\n        }\n    }\n    /* ************************************************************ */\n//to execute function asynchronously (async + await + new Promise + setTimout), link: https://dev.to/jameseaster/visualizing-merge-sort-3mnc\n    async mergeSort() {\n        const animations = doMergeSort(this.state.array) \n        let endViz = 0;\n        for (let i = 0; i < animations.length; i++) {\n\n            const arrayBars = document.getElementsByClassName('array-bar'); // get the array generated\n            const isColorChange = i % 3 !== 2; //if remainder !== 2, then i is one of the two grad-and-color subarrays (not the overwritting one, the 3rd subarray)\n            if (isColorChange) { //if True\n                //then grab the 2 indices of the subarray\n                const [barOneIdx, barTwoIdx] = animations[i]; // [idx list1 of the item that was compared with, item at idx list2]\n                // get the style at these two indices\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                // if i is a multiple of 3, change the color (secondary), otherwise let its primary color\n                const color = i % 3 === 0 ? RED_COLOR : INIT_COLOR;\n                // The conditional (ternary) operator '?' is the only JavaScript operator that takes three operands: \n                // a condition followed by a question mark (?), then an expression to execute if the condition is \n                // truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. \n                // This operator is frequently used as a shortcut for the if statement.\n                // link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:~:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy.\n\n                //using a timeout, slowly change the colors of barOne and barTwo\n                // setTimeout( () => {\n                //     barOneStyle.backgroundColor = color;\n                //     barTwoStyle.backgroundColor = color;\n                // }, i * ANIMATION_SPEED_MS);\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                endViz++;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n                //meaning if the remainder of i/3 === 2, then i is the subarray used for the overwritting \n                const [barOneIdx, newHeight] = animations[i]; // -> [idx to be overwritten, overwritting value], \n                // setTimeout( () => {\n                //     // then get the idx, get the value\n                    \n                //     // overwritte the old value\n                //     // arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                //     arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                // }, i * ANIMATION_SPEED_MS);\n                arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                arrayBars[barOneIdx].style.height = `${newHeight}px`; \n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                arrayBars[barOneIdx].style.backgroundColor = INIT_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                endViz++;\n            }\n        } \n\n        if (endViz === animations.length ) {\n            this.finalViz();\n        }\n    }\n\n    async quickSort() {\n        const animations = doQuickSort(this.state.array);\n        console.log(animations);\n        console.log('sorted:',animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            if (animations[i].length === 2) {\n                const [command, pivotIdx] =  animations[i];\n                console.log('cmd pvtidx:', command, pivotIdx);\n                const barPivotStyle = arrayBars[pivotIdx].style;\n                barPivotStyle.backgroundColor = RED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } else {\n            console.log('else:', i);\n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log(command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            console.log('barOneSTyle:', barOneStyle, 'barTwoStyle:', barTwoStyle);\n            console.log(typeof command);\n            switch(command) {\n                case -2:\n                    barOneStyle.backgroundColor = SWAP_COLOR;\n                    barTwoStyle.backgroundColor = SWAP_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                  break;\n                case -3:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    // await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n              }\n            }\n            \n              if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        }\n    }\n\n    async bubbleSort() {\n        console.log(this.state.array);\n        const animations = doBubbleSort(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            const [command, barOneIdx, barTwoIdx] = animations[i];\n            console.log('barTwoIdx:', barTwoIdx, 'arrayBars.length', arrayBars.length);\n            if (barTwoIdx === arrayBars.length) {\n                continue;\n            }\n            console.log(i, command, barOneIdx, barTwoIdx);\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            switch(command) {\n                case 0: \n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    barOneStyle.backgroundColor = RED_COLOR;\n                    barTwoStyle.backgroundColor = RED_COLOR;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    arrayBars[barOneIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    arrayBars[barTwoIdx].style.backgroundColor = OVERWRITTE_COLOR;\n                    const temp = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = temp;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                default:\n                    barOneStyle.backgroundColor = INIT_COLOR;\n                    barTwoStyle.backgroundColor = INIT_COLOR;\n            };\n            if (i === animations.length-1 ) {\n                this.finalViz();\n            }\n        };\n    }\n\n    async insertionSort() {\n        const animations = doInsertionSort(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar'); \n            switch(animations[i][0]) {\n                case 0:\n                    const keyIdxInit = animations[i][1];\n                    const barOneStyleInit = arrayBars[keyIdxInit].style;\n                    barOneStyleInit.backgroundColor= INIT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 1:\n                    const keyIdxOne = animations[i][1];\n                    const barOneStyleOne = arrayBars[keyIdxOne].style;\n                    barOneStyleOne.backgroundColor= RED_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 2:\n                    const barIdxTwo = animations[i][1];\n                    const barOneStyleTwo = arrayBars[barIdxTwo].style;\n                    barOneStyleTwo.backgroundColor= SELECT_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 3:\n                    const barIdxThree = animations[i][1];\n                    const barOneStyleThree = arrayBars[barIdxThree].style;\n                    barOneStyleThree.backgroundColor= OVERWRITTE_COLOR; \n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                case 4:\n                    const [_, barOneIdx, key] = animations[i];\n                    const barOneStyle4 = arrayBars[barOneIdx].style;\n                    barOneStyle4.height = `${key}px`;\n                    await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n                    break;\n                default:\n                } \n                if (i === animations.length-1 ) {\n                    this.finalViz();\n                }   \n            }\n          \n        }\n    \n    //finally, color the sorted list in green\n  async finalViz() {\n      console.log('in final viz');\n        const arrayBars = document.getElementsByClassName('array-bar');\n            for (let f=0; f<arrayBars.length; f++) {\n                // setTimeout( () => {\n                //     const barStyle = arrayBars[f].style;\n                //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                // }, f * ANIMATION_SPEED_MS * 2);\n                const barStyle = arrayBars[f].style;\n                barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, ANIMATION_SPEED_MS));\n            } \n            await new Promise((resolve) => setTimeout(resolve, 800));\n            for (let f = arrayBars.length-1; f >= 0; f--) {\n                // setTimeout( () => {\n                //     const barStyle = arrayBars[f].style;\n                //     barStyle.backgroundColor = FINAL_SORTED_COLOR;\n                // }, f * ANIMATION_SPEED_MS * 2);\n                const barStyle = arrayBars[f].style;\n                barStyle.backgroundColor = INIT_COLOR;\n                await new Promise((resolve) => setTimeout(resolve, 20));\n            } \n   }; \n  \n    render() {\n        return <div className='array-container'>\n            <div className='buttons-container'>\n                <button className=\"sort-button\" style={{backgroundColor:\"#b5ff87\"}} onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ffdf87\"}} onClick={() => this.quickSort()}>Quick Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#87fff9\"}}onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button className=\"sort-button\" style={{backgroundColor:\"#ff8787\"}}onClick={() => this.insertionSort()}>Insertion Sort</button>\n            </div>\n            <div style={{position: 'absolute'}}>\n                <Particles height=\"65vh\" width=\"100vw\" params={particlesConfig} />\n            </div>\n            {this.state.array.map((value, idx) => (\n                <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                    backgroundColor: INIT_COLOR,\n                    height: `${value}px`,\n                    width: `${(1.5/3)*window.innerWidth/this.state.array.length}px`,\n                    marginTop: `${50}px`\n                }}></div>\n            ))}\n        </div> ;\n    }; \n}\n\n\nexport default connect(mapStateToProps)(SortingVisualizer);","\n// import SimpleMenu from \"./components/Menu\"\nimport InputArraySlider from \"./components/ArraySlider\"\nimport InputSpeedSlider from \"./components/SpeedSlider\"\nimport Explanations from \"./components/Explanations\"\n// import Languages from \"./components/displayRawCode\" #for future implementation\nimport SortingVisualizer from \"./sortingVisualizer/SortingVisualizer\"\nimport './App.css';\nimport React from \"react\";\nimport {Helmet} from 'react-helmet';\n\nfunction App(props) {\n  // const [size, setSize] = useState([]);\n\n  // function getArraySize(ArraySize) { //update size so the slider does not move when dom re-renders\n  //   const newSize = {ArraySize};\n  //   setSize([size, newSize]);\n  //   // console.log(newSize.ArraySize);\n  // }\n\n  // const menuList = props.menus.map(menu => (\n  //   <SimpleMenu\n  //   id = {menu.id}\n  //   sort_cat = {menu.sort_cat}\n  //   sort_algo = {menu.sort_algo}\n  //   key = {menu.id}\n  //   />\n  // ));\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <style>{'body { background-color: white; }'}</style>\n      </Helmet>\n      <div className=\"appName\"><h1>Sorting Visualizer</h1></div>\n        <div id=\"topbar\">\n            <div id=\"slider-button-container\"><InputArraySlider /></div>\n            <div id=\"slider-button-container\"><InputSpeedSlider /></div>\n            <div id=\"explanations-block\"><Explanations /></div>\n        </div>\n        <div id=\"visualizer-container\"><SortingVisualizer /></div>\n      \n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store'\nimport { Provider } from \"react-redux\";\n\n// const SORT_MENUS = [\n//   {id:\"menu_sort_0\", sort_cat:\"Simple Sorts\", sort_algo:[\"Insertion Sort\", \"Selection Sort\"]},\n//   {id:\"menu_sort_1\", sort_cat:\"Efficient Sorts\", sort_algo:[\"Merge Sort\", \"Heapsort\", \"Quicksort\", \"Shellsort\"]},\n//   {id:\"menu_sort_2\", sort_cat:\"Bubble Sorts\", sort_algo: [\"Bubble sort\", \"Comb sort\"]},\n//   {id:\"menu_sort_4\", sort_cat:\"Distribution Sorts\", sort_algo:[\"Counting sort\", \"Bucket sort\", \"Radix sort\"]},\n// ]\n\nReactDOM.render(\n  <Provider store={store}>\n      {/* <App menus={SORT_MENUS}/>, */}\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}